tf.image.extract_patches( images, sizes, strides, rates, padding, name=None ) 
tf.signal.rfft( input_tensor, fft_length=None, name=None ) 
tf.linalg.expm( input, name=None ) 
tf.math.acosh( x, name=None ) 
tf.keras.layers.SeparableConv2D( filters, kernel_size, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1), depth_multiplier=1, activation=None, use_bias=(True), depthwise_initializer='glorot_uniform', pointwise_initializer='glorot_uniform', bias_initializer='zeros', depthwise_regularizer=None, pointwise_regularizer=None, bias_regularizer=None, activity_regularizer=None, depthwise_constraint=None, pointwise_constraint=None, bias_constraint=None, **kwargs ) 
tf.linalg.LinearOperatorBlockLowerTriangular( operators, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorBlockLowerTriangular' ) 
tf.keras.preprocessing.image.apply_affine_transform( x, theta=0, tx=0, ty=0, shear=0, zx=1, zy=1, row_axis=0, col_axis=1, channel_axis=2, fill_mode='nearest', cval=0.0, order=1 ) 
tf.io.parse_single_sequence_example( serialized, context_features=None, sequence_features=None, example_name=None, name=None ) 
tf.estimator.experimental.build_raw_supervised_input_receiver_fn( features, labels, default_batch_size=None ) 
tf.keras.layers.Conv3D( filters, kernel_size, strides=(1, 1, 1), padding='valid', data_format=None, dilation_rate=(1, 1, 1), groups=1, activation=None, use_bias=(True), kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs ) 
tf.experimental.numpy.real( val ) 
tf.keras.layers.GlobalMaxPool1D( data_format='channels_last', **kwargs ) 
tf.sets.difference( a, b, aminusb=(True), validate_indices=(True) ) 
tf.expand_dims( input, axis, name=None ) 
tf.random_uniform_initializer( minval=-0.05, maxval=0.05, seed=None ) 
tf.nn.embedding_lookup( params, ids, max_norm=None, name=None ) 
tf.keras.applications.EfficientNetB0( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs ) 
tf.linalg.LinearOperatorPermutation( perm, dtype=tf.dtypes.float32, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorPermutation' ) 
tf.math.cumprod( x, axis=0, exclusive=(False), reverse=(False), name=None ) 
tf.linalg.slogdet( input, name=None ) 
tf.edit_distance( hypothesis, truth, normalize=(True), name='edit_distance' ) 
tf.keras.preprocessing.text.text_to_word_sequence( input_text, filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n', lower=(True), split=' ' ) 
tf.dtypes.as_dtype( type_value ) 
tf.io.parse_single_example( serialized, features, example_names=None, name=None ) 
tf.keras.metrics.TopKCategoricalAccuracy( k=5, name='top_k_categorical_accuracy', dtype=None ) 
tf.keras.optimizers.SGD( learning_rate=0.01, momentum=0.0, nesterov=(False), name='SGD', **kwargs ) 
tf.broadcast_to( input, shape, name=None ) 
tf.linalg.logdet( matrix, name=None ) 
tf.strings.unicode_encode( input, output_encoding, errors='replace', replacement_char=65533, name=None ) 
tf.nn.sufficient_statistics( x, axes, shift=None, keepdims=(False), name=None ) 
tf.keras.utils.plot_model( model, to_file='model.png', show_shapes=(False), show_dtype=(False), show_layer_names=(True), rankdir='TB', expand_nested=(False), dpi=96 ) 
tf.queue.RandomShuffleQueue( capacity, min_after_dequeue, dtypes, shapes=None, names=None, seed=None, shared_name=None, name='random_shuffle_queue' ) 
tf.feature_column.shared_embeddings( categorical_columns, dimension, combiner='mean', initializer=None, shared_embedding_collection_name=None, ckpt_to_load_from=None, tensor_name_in_ckpt=None, max_norm=None, trainable=(True), use_safe_embedding_lookup=(True) ) 
tf.math.xlog1py( x, y, name=None ) 
tf.keras.metrics.AUC( num_thresholds=200, curve='ROC', summation_method='interpolation', name=None, dtype=None, thresholds=None, multi_label=(False), label_weights=None ) 
tf.nn.fractional_max_pool( value, pooling_ratio, pseudo_random=(False), overlapping=(False), seed=0, name=None ) 
tf.data.experimental.snapshot( path, compression='AUTO', reader_func=None, shard_func=None ) 
tf.math.special.fresnel_cos( x, name=None ) 
tf.experimental.numpy.arcsinh( x ) 
tf.histogram_fixed_width( values, value_range, nbins=100, dtype=tf.dtypes.int32, name=None ) 
tf.experimental.numpy.fliplr( m ) 
tf.keras.constraints.deserialize( config, custom_objects=None ) 
tf.keras.models.save_model( model, filepath, overwrite=(True), include_optimizer=(True), save_format=None, signatures=None, options=None, save_traces=(True) ) 
tf.keras.optimizers.Adagrad( learning_rate=0.001, initial_accumulator_value=0.1, epsilon=1e-07, name='Adagrad', **kwargs ) 
tf.sysconfig.get_compile_flags() 
tf.train.Checkpoint( root=None, **kwargs ) 
tf.keras.layers.ZeroPadding2D( padding=(1, 1), data_format=None, **kwargs ) 
tf.estimator.experimental.RNNClassifier( sequence_feature_columns, context_feature_columns=None, units=None, cell_type=USE_DEFAULT, rnn_cell_fn=None, return_sequences=(False), model_dir=None, n_classes=2, weight_column=None, label_vocabulary=None, optimizer='Adagrad', loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE, sequence_mask='sequence_mask', config=None ) 
tf.parallel_stack( values, name='parallel_stack' ) 
tf.ragged.constant( pylist, dtype=None, ragged_rank=None, inner_shape=None, name=None, row_splits_dtype=tf.dtypes.int64 ) 
tf.experimental.numpy.empty_like( a, dtype=None ) 
tf.math.bessel_i1e( x, name=None ) 
tf.keras.applications.resnet_v2.preprocess_input( x, data_format=None ) 
tf.signal.inverse_mdct( mdcts, window_fn=tf.signal.vorbis_window, norm=None, name=None ) 
tf.random.get_global_generator() 
tf.keras.layers.Cropping3D( cropping=((1, 1), (1, 1), (1, 1)), data_format=None, **kwargs ) 
tf.experimental.numpy.atleast_3d( *arys ) 
tf.estimator.BaselineEstimator( head, model_dir=None, optimizer='Ftrl', config=None ) 
tf.keras.activations.linear( x ) 
tf.strings.upper( input, encoding='', name=None ) 
tf.experimental.numpy.round( a, decimals=0 ) 
tf.experimental.numpy.less( x1, x2 ) 
tf.image.random_hue( image, max_delta, seed=None ) 
tf.nn.conv1d_transpose( input, filters, output_shape, strides, padding='SAME', data_format='NWC', dilations=None, name=None ) 
tf.data.experimental.group_by_window( key_func, reduce_func, window_size=None, window_size_func=None ) 
tf.experimental.numpy.greater( x1, x2 ) 
tf.math.special.bessel_k1e( x, name=None ) 
tf.data.experimental.prefetch_to_device( device, buffer_size=None ) 
tf.keras.experimental.PeepholeLSTMCell( units, activation='tanh', recurrent_activation='hard_sigmoid', use_bias=(True), kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', unit_forget_bias=(True), kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, **kwargs ) 
tf.nn.avg_pool3d( input, ksize, strides, padding, data_format='NDHWC', name=None ) 
tf.sets.intersection( a, b, validate_indices=(True) ) 
tf.keras.activations.hard_sigmoid( x ) 
tf.strings.unicode_decode( input, input_encoding, errors='replace', replacement_char=65533, replace_control_characters=(False), name=None ) 
tf.argsort( values, axis=-1, direction='ASCENDING', stable=(False), name=None ) 
tf.keras.initializers.deserialize( config, custom_objects=None ) 
tf.math.is_non_decreasing( x, name=None ) 
tf.truncatemod( x, y, name=None ) 
tf.experimental.numpy.clip( a, a_min, a_max ) 
tf.keras.applications.efficientnet.decode_predictions( preds, top=5 ) 
tf.data.experimental.make_saveable_from_iterator( iterator, external_state_policy='fail' ) 
tf.sparse.add( a, b, threshold=0 ) 
tf.repeat( input, repeats, axis=None, name=None ) 
tf.one_hot( indices, depth, on_value=None, off_value=None, axis=None, dtype=None, name=None ) 
tf.experimental.numpy.floor_divide( x1, x2 ) 
tf.image.sobel_edges( image ) 
tf.keras.activations.gelu( x, approximate=(False) ) 
tf.math.atan2( y, x, name=None ) 
tf.io.serialize_tensor( tensor, name=None ) 
tf.sparse.sparse_dense_matmul( sp_a, b, adjoint_a=(False), adjoint_b=(False), name=None ) 
tf.image.resize_with_pad( image, target_height, target_width, method=ResizeMethod.BILINEAR, antialias=(False) ) 
tf.keras.utils.get_source_inputs( tensor, layer=None, node_index=None ) 
tf.keras.optimizers.schedules.PiecewiseConstantDecay( boundaries, values, name=None ) 
tf.feature_column.embedding_column( categorical_column, dimension, combiner='mean', initializer=None, ckpt_to_load_from=None, tensor_name_in_ckpt=None, max_norm=None, trainable=(True), use_safe_embedding_lookup=(True) ) 
tf.lookup.TextFileInitializer( filename, key_dtype, key_index, value_dtype, value_index, vocab_size=None, delimiter='\t', name=None ) 
tf.keras.layers.PReLU( alpha_initializer='zeros', alpha_regularizer=None, alpha_constraint=None, shared_axes=None, **kwargs ) 
tf.experimental.numpy.isinf( x ) 
tf.keras.applications.inception_resnet_v2.preprocess_input( x, data_format=None ) 
tf.feature_column.categorical_column_with_hash_bucket( key, hash_bucket_size, dtype=tf.dtypes.string ) 
tf.einsum( equation, *inputs, **kwargs ) 
tf.nn.safe_embedding_lookup_sparse( embedding_weights, sparse_ids, sparse_weights=None, combiner='mean', default_id=None, max_norm=None, name=None ) 
tf.keras.layers.GlobalAveragePooling2D( data_format=None, **kwargs ) 
tf.keras.applications.densenet.decode_predictions( preds, top=5 ) 
tf.nn.local_response_normalization( input, depth_radius=5, bias=1, alpha=1, beta=0.5, name=None ) 
tf.signal.kaiser_window( window_length, beta=12.0, dtype=tf.dtypes.float32, name=None ) 
tf.math.lbeta( x, name=None ) 
tf.random.stateless_normal( shape, seed, mean=0.0, stddev=1.0, dtype=tf.dtypes.float32, name=None ) 
tf.cond( pred, true_fn=None, false_fn=None, name=None ) 
tf.experimental.numpy.argmax( a, axis=None ) 
tf.linalg.LinearOperatorTridiag( diagonals, diagonals_format=_COMPACT, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorTridiag' ) 
tf.keras.activations.relu( x, alpha=0.0, max_value=None, threshold=0 ) 
tf.queue.PaddingFIFOQueue( capacity, dtypes, shapes, names=None, shared_name=None, name='padding_fifo_queue' ) 
tf.keras.datasets.reuters.get_word_index( path='reuters_word_index.json' ) 
tf.keras.callbacks.ProgbarLogger( count_mode='samples', stateful_metrics=None ) 
tf.nn.leaky_relu( features, alpha=0.2, name=None ) 
tf.signal.mfccs_from_log_mel_spectrograms( log_mel_spectrograms, name=None ) 
tf.sysconfig.get_include() 
tf.keras.metrics.MeanSquaredLogarithmicError( name='mean_squared_logarithmic_error', dtype=None ) 
tf.keras.experimental.CosineDecay( initial_learning_rate, decay_steps, alpha=0.0, name=None ) 
tf.nn.pool( input, window_shape, pooling_type, strides=None, padding='VALID', data_format=None, dilations=None, name=None ) 
tf.math.abs( x, name=None ) 
tf.io.gfile.copy( src, dst, overwrite=(False) ) 
tf.slice( input_, begin, size, name=None ) 
tf.compat.dimension_value( dimension ) 
tf.keras.preprocessing.image.random_rotation( x, rg, row_axis=1, col_axis=2, channel_axis=0, fill_mode='nearest', cval=0.0, interpolation_order=1 ) 
tf.math.logical_or( x, y, name=None ) 
tf.image.adjust_brightness( image, delta ) 
tf.keras.layers.UpSampling1D( size=2, **kwargs ) 
tf.extract_volume_patches( input, ksizes, strides, padding, name=None ) 
tf.experimental.numpy.absolute( x ) 
tf.math.special.bessel_y0( x, name=None ) 
tf.estimator.experimental.stop_if_no_increase_hook( estimator, metric_name, max_steps_without_increase, eval_dir=None, min_steps=0, run_every_secs=60, run_every_steps=None ) 
tf.experimental.numpy.promote_types( type1, type2 ) 
tf.io.gfile.listdir( path ) 
tf.nn.normalize_moments( counts, mean_ss, variance_ss, shift, name=None ) 
tf.sparse.reset_shape( sp_input, new_shape=None ) 
tf.estimator.CheckpointSaverHook( checkpoint_dir, save_secs=None, save_steps=None, saver=None, checkpoint_basename='model.ckpt', scaffold=None, listeners=None, save_graph_def=(True) ) 
tf.io.decode_csv( records, record_defaults, field_delim=',', use_quote_delim=(True), na_value='', select_cols=None, name=None ) 
tf.strings.reduce_join( inputs, axis=None, keepdims=(False), separator='', name=None ) 
tf.keras.optimizers.Ftrl( learning_rate=0.001, learning_rate_power=-0.5, initial_accumulator_value=0.1, l1_regularization_strength=0.0, l2_regularization_strength=0.0, name='Ftrl', l2_shrinkage_regularization_strength=0.0, beta=0.0, **kwargs ) 
tf.unravel_index( indices, dims, name=None ) 
tf.keras.applications.EfficientNetB5( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs ) 
tf.random.experimental.stateless_fold_in( seed, data ) 
tf.keras.preprocessing.sequence.make_sampling_table( size, sampling_factor=1e-05 ) 
tf.math.conj( x, name=None ) 
tf.keras.callbacks.History() 
tf.ones( shape, dtype=tf.dtypes.float32, name=None ) 
tf.experimental.numpy.true_divide( x1, x2 ) 
tf.ragged.stack( values, axis=0, name=None ) 
tf.keras.preprocessing.timeseries_dataset_from_array( data, targets, sequence_length, sequence_stride=1, sampling_rate=1, batch_size=128, shuffle=(False), seed=None, start_index=None, end_index=None ) 
tf.gradients( ys, xs, grad_ys=None, name='gradients', gate_gradients=(False), aggregation_method=None, stop_gradients=None, unconnected_gradients=tf.UnconnectedGradients.NONE ) 
tf.keras.layers.experimental.preprocessing.RandomZoom( height_factor, width_factor=None, fill_mode='reflect', interpolation='bilinear', seed=None, name=None, fill_value=0.0, **kwargs ) 
tf.nn.with_space_to_batch( input, dilation_rate, padding, op, filter_shape=None, spatial_dims=None, data_format=None ) 
tf.data.experimental.unbatch() 
tf.keras.applications.mobilenet.preprocess_input( x, data_format=None ) 
tf.math.top_k( input, k=1, sorted=(True), name=None ) 
tf.tensor_scatter_nd_add( tensor, indices, updates, name=None ) 
tf.data.experimental.MapVectorizationOptions() 
tf.keras.metrics.sparse_categorical_accuracy( y_true, y_pred ) 
tf.experimental.numpy.iinfo( int_type ) 
tf.linalg.LinearOperatorCirculant2D( spectrum, input_output_dtype=tf.dtypes.complex64, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=(True), name='LinearOperatorCirculant2D' ) 
tf.signal.fft2d( input, name=None ) 
tf.gather_nd( params, indices, batch_dims=0, name=None ) 
tf.random.gamma( shape, alpha, beta=None, dtype=tf.dtypes.float32, seed=None, name=None ) 
tf.io.decode_gif( contents, name=None ) 
tf.split( value, num_or_size_splits, axis=0, num=None, name='split' ) 
tf.image.flip_up_down( image ) 
tf.math.reduce_sum( input_tensor, axis=None, keepdims=(False), name=None ) 
tf.nn.dilation2d( input, filters, strides, padding, data_format, dilations, name=None ) 
tf.keras.applications.mobilenet_v2.preprocess_input( x, data_format=None ) 
tf.keras.optimizers.Adadelta( learning_rate=0.001, rho=0.95, epsilon=1e-07, name='Adadelta', **kwargs ) 
tf.keras.layers.ELU( alpha=1.0, **kwargs ) 
tf.data.experimental.ThreadingOptions() 
tf.linalg.LinearOperatorKronecker( operators, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name=None ) 
tf.linalg.sqrtm( input, name=None ) 
tf.keras.losses.serialize( loss ) 
tf.nn.relu6( features, name=None ) 
tf.keras.applications.vgg16.preprocess_input( x, data_format=None ) 
tf.experimental.numpy.dsplit( ary, indices_or_sections ) 
tf.math.softplus( features, name=None ) 
tf.experimental.numpy.logspace( start, stop, num=50, endpoint=(True), base=10.0, dtype=None, axis=0 ) 
tf.keras.layers.GlobalMaxPool3D( data_format=None, **kwargs ) 
tf.nn.collapse_repeated( labels, seq_length, name=None ) 
tf.math.atanh( x, name=None ) 
tf.nn.log_poisson_loss( targets, log_input, compute_full_loss=(False), name=None ) 
tf.image.non_max_suppression( boxes, scores, max_output_size, iou_threshold=0.5, score_threshold=float('-inf'), name=None ) 
tf.keras.layers.DepthwiseConv2D( kernel_size, strides=(1, 1), padding='valid', depth_multiplier=1, data_format=None, dilation_rate=(1, 1), activation=None, use_bias=(True), depthwise_initializer='glorot_uniform', bias_initializer='zeros', depthwise_regularizer=None, bias_regularizer=None, activity_regularizer=None, depthwise_constraint=None, bias_constraint=None, **kwargs ) 
tf.keras.applications.inception_v3.preprocess_input( x, data_format=None ) 
tf.math.minimum( x, y, name=None ) 
tf.nn.conv1d( input, filters, stride, padding, data_format='NWC', dilations=None, name=None ) 
tf.nn.sampled_softmax_loss( weights, biases, labels, inputs, num_sampled, num_classes, num_true=1, sampled_values=None, remove_accidental_hits=(True), seed=None, name='sampled_softmax_loss' ) 
tf.experimental.numpy.tile( a, reps ) 
tf.linalg.eig( tensor, name=None ) 
tf.math.scalar_mul( scalar, x, name=None ) 
tf.data.experimental.service.distribute( processing_mode, service, job_name=None, max_outstanding_requests=None ) 
tf.make_tensor_proto( values, dtype=None, shape=None, verify_shape=(False), allow_broadcast=(False) ) 
tf.math.logical_not( x, name=None ) 
tf.keras.layers.LeakyReLU( alpha=0.3, **kwargs ) 
tf.nn.relu( features, name=None ) 
tf.experimental.numpy.prod( a, axis=None, dtype=None, keepdims=None ) 
tf.keras.layers.Permute( dims, **kwargs ) 
tf.io.TFRecordWriter( path, options=None ) 
tf.random.categorical( logits, num_samples, dtype=None, seed=None, name=None ) 
tf.random.experimental.stateless_split( seed, num=2 ) 
tf.linalg.pinv( a, rcond=None, validate_args=(False), name=None ) 
tf.signal.frame( signal, frame_length, frame_step, pad_end=(False), pad_value=0, axis=-1, name=None ) 
tf.math.reduce_min( input_tensor, axis=None, keepdims=(False), name=None ) 
tf.math.angle( input, name=None ) 
tf.keras.applications.resnet.preprocess_input( x, data_format=None ) 
tf.keras.applications.NASNetLarge( input_shape=None, include_top=(True), weights='imagenet', input_tensor=None, pooling=None, classes=1000 ) 
tf.Module( name=None ) 
tf.io.gfile.rmtree( path ) 
tf.estimator.SummarySaverHook( save_steps=None, save_secs=None, output_dir=None, summary_writer=None, scaffold=None, summary_op=None ) 
tf.math.multiply( x, y, name=None ) 
tf.io.match_filenames_once( pattern, name=None ) 
tf.keras.metrics.MeanAbsolutePercentageError( name='mean_absolute_percentage_error', dtype=None ) 
tf.io.matching_files( pattern, name=None ) 
tf.nn.crelu( features, axis=-1, name=None ) 
tf.data.experimental.bytes_produced_stats( tag ) 
tf.math.less_equal( x, y, name=None ) 
tf.keras.layers.SpatialDropout1D( rate, **kwargs ) 
tf.keras.callbacks.Callback() 
tf.load_library( library_location ) 
tf.experimental.numpy.nextafter( x1, x2 ) 
tf.get_static_value( tensor, partial=(False) ) 
tf.keras.layers.multiply( inputs, **kwargs ) 
tf.keras.metrics.FalsePositives( thresholds=None, name=None, dtype=None ) 
tf.keras.metrics.Metric( name=None, dtype=None, **kwargs ) 
tf.keras.losses.Loss( reduction=losses_utils.ReductionV2.AUTO, name=None ) 
tf.image.rgb_to_yuv( images ) 
tf.sparse.retain( sp_input, to_retain ) 
tf.saved_model.save( obj, export_dir, signatures=None, options=None ) 
tf.math.reduce_variance( input_tensor, axis=None, keepdims=(False), name=None ) 
tf.math.special.bessel_k1( x, name=None ) 
tf.math.reduce_max( input_tensor, axis=None, keepdims=(False), name=None ) 
tf.keras.activations.get( identifier ) 
tf.experimental.numpy.flipud( m ) 
tf.estimator.BaselineClassifier( model_dir=None, n_classes=2, weight_column=None, label_vocabulary=None, optimizer='Ftrl', config=None, loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE ) 
tf.keras.layers.SimpleRNN( units, activation='tanh', use_bias=(True), kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, return_sequences=(False), return_state=(False), go_backwards=(False), stateful=(False), unroll=(False), **kwargs ) 
tf.data.experimental.latency_stats( tag ) 
tf.linalg.tridiagonal_solve( diagonals, rhs, diagonals_format='compact', transpose_rhs=(False), conjugate_rhs=(False), name=None, partial_pivoting=(True) ) 
tf.keras.backend.is_keras_tensor( x ) 
tf.make_ndarray( tensor ) 
tf.dtypes.complex( real, imag, name=None ) 
tf.experimental.numpy.var( a, axis=None, dtype=None, out=None, ddof=0, keepdims=None ) 
tf.keras.layers.InputLayer( input_shape=None, batch_size=None, dtype=None, input_tensor=None, sparse=(False), name=None, ragged=(False), **kwargs ) 
tf.sysconfig.get_link_flags() 
tf.math.pow( x, y, name=None ) 
tf.keras.layers.experimental.preprocessing.CategoryCrossing( depth=None, name=None, separator=None, **kwargs ) 
tf.experimental.numpy.expm1( x ) 
tf.data.experimental.Counter( start=0, step=1, dtype=tf.dtypes.int64 ) 
tf.keras.preprocessing.image.random_channel_shift( x, intensity_range, channel_axis=0 ) 
tf.experimental.numpy.logaddexp2( x1, x2 ) 
tf.keras.applications.EfficientNetB2( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs ) 
tf.feature_column.crossed_column( keys, hash_bucket_size, hash_key=None ) 
tf.rank( input, name=None ) 
tf.signal.linear_to_mel_weight_matrix( num_mel_bins=20, num_spectrogram_bins=129, sample_rate=8000, lower_edge_hertz=125.0, upper_edge_hertz=3800.0, dtype=tf.dtypes.float32, name=None ) 
tf.estimator.BaselineRegressor( model_dir=None, label_dimension=1, weight_column=None, optimizer='Ftrl', config=None, loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE ) 
tf.experimental.numpy.polyval( p, x ) 
tf.estimator.experimental.RNNEstimator( head, sequence_feature_columns, context_feature_columns=None, units=None, cell_type=USE_DEFAULT, rnn_cell_fn=None, return_sequences=(False), model_dir=None, optimizer='Adagrad', config=None ) 
tf.keras.layers.GlobalMaxPool2D( data_format=None, **kwargs ) 
tf.keras.utils.serialize_keras_object( instance ) 
tf.random.poisson( shape, lam, dtype=tf.dtypes.float32, seed=None, name=None ) 
tf.unique( x, out_idx=tf.dtypes.int32, name=None ) 
tf.experimental.numpy.repeat( a, repeats, axis=None ) 
tf.linalg.logm( input, name=None ) 
tf.quantization.fake_quant_with_min_max_vars_per_channel( inputs, min, max, num_bits=8, narrow_range=(False), name=None ) 
tf.keras.initializers.Orthogonal( gain=1.0, seed=None ) 
tf.keras.initializers.Constant( value=0 ) 
tf.strings.ngrams( data, ngram_width, separator=' ', pad_values=None, padding_width=None, preserve_short_sequences=(False), name=None ) 
tf.experimental.numpy.broadcast_to( array, shape ) 
tf.tensor_scatter_nd_min( tensor, indices, updates, name=None ) 
tf.experimental.numpy.triu( m, k=0 ) 
tf.reverse( tensor, axis, name=None ) 
tf.keras.layers.StackedRNNCells( cells, **kwargs ) 
tf.keras.activations.swish( x ) 
tf.experimental.numpy.take_along_axis( arr, indices, axis ) 
tf.keras.applications.mobilenet.decode_predictions( preds, top=5 ) 
tf.experimental.numpy.maximum( x1, x2 ) 
tf.fill( dims, value, name=None ) 
tf.keras.preprocessing.image.NumpyArrayIterator( x, y, image_data_generator, batch_size=32, shuffle=(False), sample_weight=None, seed=None, data_format=None, save_to_dir=None, save_prefix='', save_format='png', subset=None, dtype=None ) 
tf.math.less( x, y, name=None ) 
tf.experimental.numpy.arcsin( x ) 
tf.constant_initializer( value=0 ) 
tf.keras.losses.CategoricalCrossentropy( from_logits=(False), label_smoothing=0, reduction=losses_utils.ReductionV2.AUTO, name='categorical_crossentropy' ) 
tf.train.Coordinator( clean_stop_exception_types=None ) 
tf.keras.layers.MaxPool2D( pool_size=(2, 2), strides=None, padding='valid', data_format=None, **kwargs ) 
tf.image.stateless_random_jpeg_quality( image, min_jpeg_quality, max_jpeg_quality, seed ) 
tf.io.TFRecordOptions( compression_type=None, flush_mode=None, input_buffer_size=None, output_buffer_size=None, window_bits=None, compression_level=None, compression_method=None, mem_level=None, compression_strategy=None ) 
tf.io.gfile.rename( src, dst, overwrite=(False) ) 
tf.lite.experimental.load_delegate( library, options=None ) 
tf.grad_pass_through( f ) 
tf.signal.ifft( input, name=None ) 
tf.experimental.numpy.log1p( x ) 
tf.keras.mixed_precision.set_global_policy( policy ) 
tf.scatter_nd( indices, updates, shape, name=None ) 
tf.image.ssim( img1, img2, max_val, filter_size=11, filter_sigma=1.5, k1=0.01, k2=0.03 ) 
tf.experimental.numpy.ceil( x ) 
tf.scan( fn, elems, initializer=None, parallel_iterations=10, back_prop=(True), swap_memory=(False), infer_shape=(True), reverse=(False), name=None ) 
tf.keras.layers.ThresholdedReLU( theta=1.0, **kwargs ) 
tf.no_op( name=None ) 
tf.keras.activations.softplus( x ) 
tf.keras.preprocessing.image.smart_resize( x, size, interpolation='bilinear' ) 
tf.nest.flatten( structure, expand_composites=(False) ) 
tf.keras.utils.unpack_x_y_sample_weight( data ) 
tf.keras.datasets.fashion_mnist.load_data() 
tf.experimental.numpy.split( ary, indices_or_sections, axis=0 ) 
tf.experimental.numpy.transpose( a, axes=None ) 
tf.saved_model.load( export_dir, tags=None, options=None ) 
tf.keras.optimizers.deserialize( config, custom_objects=None ) 
tf.linalg.lu_solve( lower_upper, perm, rhs, validate_args=(False), name=None ) 
tf.experimental.numpy.random.seed( s ) 
tf.keras.activations.elu( x, alpha=1.0 ) 
tf.keras.layers.LayerNormalization( axis=-1, epsilon=0.001, center=(True), scale=(True), beta_initializer='zeros', gamma_initializer='ones', beta_regularizer=None, gamma_regularizer=None, beta_constraint=None, gamma_constraint=None, trainable=(True), name=None, **kwargs ) 
tf.math.igammac( a, x, name=None ) 
tf.keras.callbacks.EarlyStopping( monitor='val_loss', min_delta=0, patience=0, verbose=0, mode='auto', baseline=None, restore_best_weights=(False) ) 
tf.experimental.numpy.cumsum( a, axis=None, dtype=None ) 
tf.strings.to_hash_bucket_fast( input, num_buckets, name=None ) 
tf.experimental.numpy.bitwise_not( x ) 
tf.while_loop( cond, body, loop_vars, shape_invariants=None, parallel_iterations=10, back_prop=(True), swap_memory=(False), maximum_iterations=None, name=None ) 
tf.compat.path_to_str( path ) 
tf.histogram_fixed_width_bins( values, value_range, nbins=100, dtype=tf.dtypes.int32, name=None ) 
tf.keras.applications.ResNet101V2( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax' ) 
tf.estimator.experimental.stop_if_no_decrease_hook( estimator, metric_name, max_steps_without_decrease, eval_dir=None, min_steps=0, run_every_secs=60, run_every_steps=None ) 
tf.load_op_library( library_filename ) 
tf.math.not_equal( x, y, name=None ) 
tf.math.subtract( x, y, name=None ) 
tf.keras.backend.set_image_data_format( data_format ) 
tf.io.write_file( filename, contents, name=None ) 
tf.strings.unicode_script( input, name=None ) 
tf.experimental.numpy.full( shape, fill_value, dtype=None ) 
tf.keras.layers.GaussianNoise( stddev, **kwargs ) 
tf.experimental.numpy.array( val, dtype=None, copy=(True), ndmin=0 ) 
tf.experimental.numpy.isfinite( x ) 
tf.vectorized_map( fn, elems, fallback_to_while_loop=(True) ) 
tf.experimental.numpy.sign( x, out=None, where=None, **kwargs ) 
tf.math.expm1( x, name=None ) 
tf.keras.metrics.FalseNegatives( thresholds=None, name=None, dtype=None ) 
tf.data.experimental.sample_from_datasets( datasets, weights=None, seed=None ) 
tf.linalg.LinearOperator( dtype, graph_parents=None, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name=None, parameters=None ) 
tf.keras.preprocessing.text.tokenizer_from_json( json_string ) 
tf.image.random_jpeg_quality( image, min_jpeg_quality, max_jpeg_quality, seed=None ) 
tf.math.log_sigmoid( x, name=None ) 
tf.nest.pack_sequence_as( structure, flat_sequence, expand_composites=(False) ) 
tf.math.sobol_sample( dim, num_results, skip=0, dtype=tf.dtypes.float32, name=None ) 
tf.keras.callbacks.LambdaCallback( on_epoch_begin=None, on_epoch_end=None, on_batch_begin=None, on_batch_end=None, on_train_begin=None, on_train_end=None, **kwargs ) 
tf.nn.max_pool( input, ksize, strides, padding, data_format=None, name=None ) 
tf.linalg.LinearOperatorHouseholder( reflection_axis, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorHouseholder' ) 
tf.keras.layers.ReLU( max_value=None, negative_slope=0, threshold=0, **kwargs ) 
tf.data.experimental.service.DispatchServer( config=None, start=(True) ) 
tf.math.reduce_logsumexp( input_tensor, axis=None, keepdims=(False), name=None ) 
tf.keras.metrics.Hinge( name='hinge', dtype=None ) 
tf.experimental.numpy.diag( v, k=0 ) 
tf.nn.compute_average_loss( per_example_loss, sample_weight=None, global_batch_size=None ) 
tf.sparse.reduce_sum( sp_input, axis=None, keepdims=None, output_is_sparse=(False), name=None ) 
tf.estimator.BinaryClassHead( weight_column=None, thresholds=None, label_vocabulary=None, loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE, loss_fn=None, name=None ) 
tf.sequence_mask( lengths, maxlen=None, dtype=tf.dtypes.bool, name=None ) 
tf.Graph() 
tf.keras.layers.dot( inputs, axes, normalize=(False), **kwargs ) 
tf.experimental.numpy.atleast_1d( *arys ) 
tf.keras.backend.epsilon() 
tf.nest.assert_same_structure( nest1, nest2, check_types=(True), expand_composites=(False) ) 
tf.math.reduce_prod( input_tensor, axis=None, keepdims=(False), name=None ) 
tf.ragged.segment_ids_to_row_splits( segment_ids, num_segments=None, out_type=None, name=None ) 
tf.experimental.numpy.floor( x ) 
tf.nest.is_nested( seq ) 
tf.estimator.DNNLinearCombinedRegressor( model_dir=None, linear_feature_columns=None, linear_optimizer='Ftrl', dnn_feature_columns=None, dnn_optimizer='Adagrad', dnn_hidden_units=None, dnn_activation_fn=tf.nn.relu, dnn_dropout=None, label_dimension=1, weight_column=None, config=None, warm_start_from=None, loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE, batch_norm=(False), linear_sparse_combiner='sum' ) 
tf.lookup.KeyValueTensorInitializer( keys, values, key_dtype=None, value_dtype=None, name=None ) 
tf.group( *inputs, **kwargs ) 
tf.keras.optimizers.Nadam( learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, name='Nadam', **kwargs ) 
tf.experimental.numpy.exp2( x ) 
tf.keras.layers.MaxPool3D( pool_size=(2, 2, 2), strides=None, padding='valid', data_format=None, **kwargs ) 
tf.keras.losses.categorical_hinge( y_true, y_pred ) 
tf.keras.layers.SpatialDropout2D( rate, data_format=None, **kwargs ) 
tf.keras.losses.CategoricalHinge( reduction=losses_utils.ReductionV2.AUTO, name='categorical_hinge' ) 
tf.estimator.RegressionHead( label_dimension=1, weight_column=None, loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE, loss_fn=None, inverse_link_fn=None, name=None ) 
tf.audio.encode_wav( audio, sample_rate, name=None ) 
tf.math.segment_min( data, segment_ids, name=None ) 
tf.keras.wrappers.scikit_learn.KerasRegressor( build_fn=None, **sk_params ) 
tf.keras.layers.GRUCell( units, activation='tanh', recurrent_activation='sigmoid', use_bias=(True), kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, reset_after=(True), **kwargs ) 
tf.saved_model.Asset( path ) 
tf.sparse.eye( num_rows, num_columns=None, dtype=tf.dtypes.float32, name=None ) 
tf.signal.kaiser_bessel_derived_window( window_length, beta=12.0, dtype=tf.dtypes.float32, name=None ) 
tf.keras.callbacks.ModelCheckpoint( filepath, monitor='val_loss', verbose=0, save_best_only=(False), save_weights_only=(False), mode='auto', save_freq='epoch', options=None, **kwargs ) 
tf.keras.losses.squared_hinge( y_true, y_pred ) 
tf.nn.atrous_conv2d( value, filters, rate, padding, name=None ) 
tf.estimator.NanLossDuringTrainingError( *args, **kwargs ) 
tf.keras.Input( shape=None, batch_size=None, name=None, dtype=None, sparse=(False), tensor=None, ragged=(False), **kwargs ) 
tf.get_logger() 
tf.keras.callbacks.LearningRateScheduler( schedule, verbose=0 ) 
tf.queue.FIFOQueue( capacity, dtypes, shapes=None, names=None, shared_name=None, name='fifo_queue' ) 
tf.keras.mixed_precision.LossScaleOptimizer( inner_optimizer, dynamic=(True), initial_scale=None, dynamic_growth_steps=None ) 
tf.keras.layers.AdditiveAttention( use_scale=(True), **kwargs ) 
tf.estimator.LinearEstimator( head, feature_columns, model_dir=None, optimizer='Ftrl', config=None, sparse_combiner='sum', warm_start_from=None ) 
tf.keras.layers.DenseFeatures( feature_columns, trainable=(True), name=None, **kwargs ) 
tf.image.yuv_to_rgb( images ) 
tf.strings.substr( input, pos, len, unit='BYTE', name=None ) 
tf.lookup.StaticHashTable( initializer, default_value, name=None ) 
tf.math.add( x, y, name=None ) 
tf.math.bincount( arr, weights=None, minlength=None, maxlength=None, dtype=tf.dtypes.int32, name=None, axis=None, binary_output=(False) ) 
tf.data.experimental.OptimizationOptions() 
tf.math.lgamma( x, name=None ) 
tf.math.invert_permutation( x, name=None ) 
tf.keras.preprocessing.image.DirectoryIterator( directory, image_data_generator, target_size=(256, 256), color_mode='rgb', classes=None, class_mode='categorical', batch_size=32, shuffle=(True), seed=None, data_format=None, save_to_dir=None, save_prefix='', save_format='png', follow_links=(False), subset=None, interpolation='nearest', dtype=None ) 
tf.experimental.numpy.arccosh( x ) 
tf.data.experimental.shuffle_and_repeat( buffer_size, count=None, seed=None ) 
tf.linalg.matrix_rank( a, tol=None, validate_args=(False), name=None ) 
tf.keras.estimator.model_to_estimator( keras_model=None, keras_model_path=None, custom_objects=None, model_dir=None, config=None, checkpoint_format='checkpoint', metric_names_map=None, export_outputs=None ) 
tf.keras.layers.Add( **kwargs )
tf.keras.metrics.top_k_categorical_accuracy( y_true, y_pred, k=5 ) 
tf.experimental.numpy.power( x1, x2 ) 
tf.keras.layers.experimental.preprocessing.RandomHeight( factor, interpolation='bilinear', seed=None, name=None, **kwargs ) 
tf.keras.metrics.MeanSquaredError( name='mean_squared_error', dtype=None ) 
tf.random.stateless_binomial( shape, seed, counts, probs, output_dtype=tf.dtypes.int32, name=None ) 
tf.zeros_like( input, dtype=None, name=None ) 
tf.linalg.tensor_diag_part( input, name=None ) 
tf.random.uniform( shape, minval=0, maxval=None, dtype=tf.dtypes.float32, seed=None, name=None ) 
tf.keras.losses.BinaryCrossentropy( from_logits=(False), label_smoothing=0, reduction=losses_utils.ReductionV2.AUTO, name='binary_crossentropy' ) 
tf.keras.layers.Embedding( input_dim, output_dim, embeddings_initializer='uniform', embeddings_regularizer=None, activity_regularizer=None, embeddings_constraint=None, mask_zero=(False), input_length=None, **kwargs ) 
tf.keras.losses.MAPE( y_true, y_pred ) 
tf.quantization.fake_quant_with_min_max_vars_gradient( gradients, inputs, min, max, num_bits=8, narrow_range=(False), name=None ) 
tf.keras.layers.Conv3DTranspose( filters, kernel_size, strides=(1, 1, 1), padding='valid', output_padding=None, data_format=None, dilation_rate=(1, 1, 1), activation=None, use_bias=(True), kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs ) 
tf.keras.experimental.LinearCosineDecay( initial_learning_rate, decay_steps, num_periods=0.5, alpha=0.0, beta=0.001, name=None ) 
tf.signal.stft( signals, frame_length, frame_step, fft_length=None, window_fn=tf.signal.hann_window, pad_end=(False), name=None ) 
tf.io.gfile.isdir( path ) 
tf.experimental.numpy.isneginf( x ) 
tf.experimental.numpy.sum( a, axis=None, dtype=None, keepdims=None ) 
tf.keras.optimizers.RMSprop( learning_rate=0.001, rho=0.9, momentum=0.0, epsilon=1e-07, centered=(False), name='RMSprop', **kwargs ) 
tf.estimator.experimental.InMemoryEvaluatorHook( estimator, input_fn, steps=None, hooks=None, name=None, every_n_iter=100 ) 
tf.experimental.dlpack.from_dlpack( dlcapsule ) 
tf.image.adjust_hue( image, delta, name=None ) 
tf.data.experimental.parse_example_dataset( features, num_parallel_calls=1, deterministic=None ) 
tf.autodiff.ForwardAccumulator( primals, tangents ) 
tf.math.segment_sum( data, segment_ids, name=None ) 
tf.estimator.train_and_evaluate( estimator, train_spec, eval_spec ) 
tf.keras.models.load_model( filepath, custom_objects=None, compile=(True), options=None ) 
tf.experimental.numpy.any( a, axis=None, keepdims=None ) 
tf.image.resize( images, size, method=ResizeMethod.BILINEAR, preserve_aspect_ratio=(False), antialias=(False), name=None ) 
tf.io.parse_sequence_example( serialized, context_features=None, sequence_features=None, example_names=None, name=None ) 
tf.experimental.numpy.nonzero( a ) 
tf.experimental.numpy.random.rand( *size ) 
tf.keras.metrics.binary_accuracy( y_true, y_pred, threshold=0.5 ) 
tf.keras.preprocessing.image.apply_brightness_shift( x, brightness ) 
tf.sparse.to_dense( sp_input, default_value=None, validate_indices=(True), name=None ) 
tf.keras.applications.ResNet152V2( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax' ) 
tf.keras.applications.ResNet152( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, **kwargs ) 
tf.data.experimental.TFRecordWriter( filename, compression_type=None ) 
tf.experimental.numpy.hstack( tup ) 
tf.experimental.numpy.not_equal( x1, x2 ) 
tf.experimental.numpy.tensordot( a, b, axes=2 ) 
tf.shape_n( input, out_type=tf.dtypes.int32, name=None ) 
tf.image.random_contrast( image, lower, upper, seed=None ) 
tf.estimator.experimental.call_logit_fn( logit_fn, features, mode, params, config ) 
tf.image.sample_distorted_bounding_box( image_size, bounding_boxes, seed=0, min_object_covered=0.1, aspect_ratio_range=None, area_range=None, max_attempts=None, use_image_if_no_bounding_boxes=None, name=None ) 
tf.keras.applications.InceptionResNetV2( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs ) 
tf.experimental.numpy.mod( x1, x2 ) 
tf.strings.unsorted_segment_join( inputs, segment_ids, num_segments, separator='', name=None ) 
tf.keras.losses.LogCosh( reduction=losses_utils.ReductionV2.AUTO, name='log_cosh' ) 
tf.keras.activations.softsign( x ) 
tf.image.stateless_random_brightness( image, max_delta, seed ) 
tf.shape( input, out_type=tf.dtypes.int32, name=None ) 
tf.linalg.diag( diagonal, name='diag', k=0, num_rows=-1, num_cols=-1, padding_value=0, align='RIGHT_LEFT' ) 
tf.nn.conv_transpose( input, filters, output_shape, strides, padding='SAME', data_format=None, dilations=None, name=None ) 
tf.experimental.numpy.hsplit( ary, indices_or_sections ) 
tf.math.rsqrt( x, name=None ) 
tf.experimental.numpy.finfo( dtype ) 
tf.experimental.numpy.less_equal( x1, x2 ) 
tf.linalg.LinearOperatorLowerTriangular( tril, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorLowerTriangular' ) 
tf.keras.backend.set_floatx( value ) 
tf.linalg.trace( x, name=None ) 
tf.estimator.LogisticRegressionHead( weight_column=None, loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE, name=None ) 
tf.strings.as_string( input, precision=-1, scientific=(False), shortest=(False), width=-1, fill='', name=None ) 
tf.switch_case( branch_index, branch_fns, default=None, name='switch_case' ) 
tf.keras.layers.experimental.preprocessing.CenterCrop( height, width, name=None, **kwargs ) 
tf.data.experimental.save( dataset, path, compression=None, shard_func=None ) 
tf.nn.separable_conv2d( input, depthwise_filter, pointwise_filter, strides, padding, data_format=None, dilations=None, name=None ) 
tf.io.decode_bmp( contents, channels=0, name=None ) 
tf.estimator.BoostedTreesClassifier( feature_columns, n_batches_per_layer, model_dir=None, n_classes=2, weight_column=None, label_vocabulary=None, n_trees=100, max_depth=6, learning_rate=0.1, l1_regularization=0.0, l2_regularization=0.0, tree_complexity=0.0, min_node_weight=0.0, config=None, center_bias=(False), pruning_mode='none', quantile_sketch_epsilon=0.01, train_in_memory=(False) ) 
tf.nest.map_structure( func, *structure, **kwargs ) 
tf.keras.layers.TimeDistributed( layer, **kwargs ) 
tf.searchsorted( sorted_sequence, values, side='left', out_type=tf.dtypes.int32, name=None ) 
tf.keras.applications.MobileNetV2( input_shape=None, alpha=1.0, include_top=(True), weights='imagenet', input_tensor=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs ) 
tf.feature_column.categorical_column_with_vocabulary_list( key, vocabulary_list, dtype=None, default_value=-1, num_oov_buckets=0 ) 
tf.io.decode_jpeg( contents, channels=0, ratio=1, fancy_upscaling=(True), try_recover_truncated=(False), acceptable_fraction=1, dct_method='', name=None ) 
tf.feature_column.numeric_column( key, shape=(1,), default_value=None, dtype=tf.dtypes.float32, normalizer_fn=None ) 
tf.strings.unicode_decode_with_offsets( input, input_encoding, errors='replace', replacement_char=65533, replace_control_characters=(False), name=None ) 
tf.keras.wrappers.scikit_learn.KerasClassifier( build_fn=None, **sk_params ) 
tf.keras.optimizers.schedules.serialize( learning_rate_schedule ) 
tf.signal.fft3d( input, name=None ) 
tf.image.per_image_standardization( image ) 
tf.estimator.LinearRegressor( feature_columns, model_dir=None, label_dimension=1, weight_column=None, optimizer='Ftrl', config=None, warm_start_from=None, loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE, sparse_combiner='sum' ) 
tf.experimental.numpy.array_equal( a1, a2 ) 
tf.data.experimental.unique() 
tf.keras.preprocessing.image.img_to_array( img, data_format=None, dtype=None ) 
tf.nn.embedding_lookup_sparse( params, sp_ids, sp_weights, combiner=None, max_norm=None, name=None ) 
tf.estimator.DNNLinearCombinedEstimator( head, model_dir=None, linear_feature_columns=None, linear_optimizer='Ftrl', dnn_feature_columns=None, dnn_optimizer='Adagrad', dnn_hidden_units=None, dnn_activation_fn=tf.nn.relu, dnn_dropout=None, config=None, linear_sparse_combiner='sum' ) 
tf.nn.elu( features, name=None ) 
tf.image.central_crop( image, central_fraction ) 
tf.nn.depthwise_conv2d_backprop_input( input_sizes, filter, out_backprop, strides, padding, data_format='NHWC', dilations=[1, 1, 1, 1], name=None ) 
tf.experimental.numpy.dstack( tup ) 
tf.nn.sigmoid_cross_entropy_with_logits( labels=None, logits=None, name=None ) 
tf.math.sigmoid( x, name=None ) 
tf.data.experimental.group_by_reducer( key_func, reducer ) 
tf.experimental.numpy.select( condlist, choicelist, default=0 ) 
tf.keras.callbacks.BaseLogger( stateful_metrics=None ) 
tf.image.transpose( image, name=None ) 
tf.keras.backend.image_data_format() 
tf.keras.layers.GRU( units, activation='tanh', recurrent_activation='sigmoid', use_bias=(True), kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, return_sequences=(False), return_state=(False), go_backwards=(False), stateful=(False), unroll=(False), time_major=(False), reset_after=(True), **kwargs ) 
tf.experimental.numpy.equal( x1, x2 ) 
tf.roll( input, shift, axis, name=None ) 
tf.unique_with_counts( x, out_idx=tf.dtypes.int32, name=None ) 
tf.signal.dct( input, type=2, n=None, axis=-1, norm=None, name=None ) 
tf.experimental.numpy.result_type( *arrays_and_dtypes ) 
tf.experimental.numpy.dot( a, b ) 
tf.experimental.numpy.isrealobj( x ) 
tf.bitwise.bitwise_xor( x, y, name=None ) 
tf.keras.metrics.get( identifier ) 
tf.math.unsorted_segment_max( data, segment_ids, num_segments, name=None ) 
tf.data.experimental.make_csv_dataset( file_pattern, batch_size, column_names=None, column_defaults=None, label_name=None, select_columns=None, field_delim=',', use_quote_delim=(True), na_value='', header=(True), num_epochs=None, shuffle=(True), shuffle_buffer_size=10000, shuffle_seed=None, prefetch_buffer_size=None, num_parallel_reads=None, sloppy=(False), num_rows_for_inference=100, compression_type=None, ignore_errors=(False) ) 
tf.image.rgb_to_grayscale( images, name=None ) 
tf.experimental.numpy.logical_and( x1, x2 ) 
tf.io.gfile.mkdir( path ) 
tf.linalg.det( input, name=None ) 
tf.math.xlogy( x, y, name=None ) 
tf.nn.avg_pool( input, ksize, strides, padding, data_format=None, name=None ) 
tf.experimental.numpy.pad( array, pad_width, mode, **kwargs ) 
tf.keras.applications.MobileNetV3Small( input_shape=None, alpha=1.0, minimalistic=(False), include_top=(True), weights='imagenet', input_tensor=None, classes=1000, pooling=None, dropout_rate=0.2, classifier_activation='softmax' ) 
tf.math.special.spence( x, name=None ) 
tf.keras.layers.Cropping1D( cropping=(1, 1), **kwargs ) 
tf.space_to_batch_nd( input, block_shape, paddings, name=None ) 
tf.keras.regularizers.l1_l2( l1=0.01, l2=0.01 ) 
tf.estimator.LatestExporter( name, serving_input_receiver_fn, assets_extra=None, as_text=(False), exports_to_keep=5 ) 
tf.math.truediv( x, y, name=None ) 
tf.feature_column.sequence_categorical_column_with_identity( key, num_buckets, default_value=None ) 
tf.linalg.LinearOperatorZeros( num_rows, num_columns=None, batch_shape=None, dtype=None, is_non_singular=(False), is_self_adjoint=(True), is_positive_definite=(False), is_square=(True), assert_proper_shapes=(False), name='LinearOperatorZeros' ) 
tf.nn.ctc_loss( labels, logits, label_length, logit_length, logits_time_major=(True), unique=None, blank_index=None, name=None ) 
tf.random.uniform_candidate_sampler( true_classes, num_true, num_sampled, unique, range_max, seed=None, name=None ) 
tf.image.rgb_to_yiq( images ) 
tf.keras.applications.EfficientNetB3( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs ) 
tf.keras.metrics.TrueNegatives( thresholds=None, name=None, dtype=None ) 
tf.io.decode_image( contents, channels=None, dtype=tf.dtypes.uint8, name=None, expand_animations=(True) ) 
tf.math.reciprocal_no_nan( x, name=None ) 
tf.experimental.numpy.eye( N, M=None, k=0, dtype=float ) 
tf.tuple( tensors, control_inputs=None, name=None ) 
tf.math.equal( x, y, name=None ) 
tf.nn.RNNCellDropoutWrapper( *args, **kwargs ) 
tf.linalg.matrix_transpose( a, name='matrix_transpose', conjugate=(False) ) 
tf.stack( values, axis=0, name='stack' ) 
tf.keras.layers.experimental.preprocessing.Resizing( height, width, interpolation='bilinear', name=None, **kwargs ) 
tf.experimental.numpy.ptp( a, axis=None, keepdims=None ) 
tf.keras.applications.EfficientNetB6( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs ) 
tf.experimental.numpy.abs( x ) 
tf.linalg.tridiagonal_matmul( diagonals, rhs, diagonals_format='compact', name=None ) 
tf.sparse.expand_dims( sp_input, axis=None, name=None ) 
tf.keras.metrics.Mean( name='mean', dtype=None ) 
tf.experimental.numpy.diff( a, n=1, axis=-1 ) 
tf.math.floormod( x, y, name=None ) 
tf.keras.applications.densenet.preprocess_input( x, data_format=None ) 
tf.experimental.numpy.diag_indices( n, ndim=2 ) 
tf.strings.unicode_transcode( input, input_encoding, output_encoding, errors='replace', replacement_char=65533, replace_control_characters=(False), name=None ) 
tf.keras.layers.concatenate( inputs, axis=-1, **kwargs ) 
tf.GradientTape( persistent=(False), watch_accessed_variables=(True) ) 
tf.queue.QueueBase( dtypes, shapes, names, queue_ref ) 
tf.nn.bias_add( value, bias, data_format=None, name=None ) 
tf.data.experimental.CheckpointInputPipelineHook( estimator, external_state_policy='fail' ) 
tf.experimental.numpy.bitwise_or( x1, x2 ) 
tf.signal.hamming_window( window_length, periodic=(True), dtype=tf.dtypes.float32, name=None ) 
tf.experimental.numpy.diagonal( a, offset=0, axis1=0, axis2=1 ) 
tf.experimental.numpy.isposinf( x ) 
tf.keras.layers.Reshape( target_shape, **kwargs ) 
tf.signal.irfft2d( input_tensor, fft_length=None, name=None ) 
tf.ragged.range( starts, limits=None, deltas=1, dtype=None, name=None, row_splits_dtype=tf.dtypes.int64 ) 
tf.nn.selu( features, name=None ) 
tf.feature_column.sequence_categorical_column_with_vocabulary_list( key, vocabulary_list, dtype=None, default_value=-1, num_oov_buckets=0 ) 
tf.keras.applications.EfficientNetB1( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs ) 
tf.experimental.numpy.kron( a, b ) 
tf.math.argmax( input, axis=None, output_type=tf.dtypes.int64, name=None ) 
tf.strings.format( template, inputs, placeholder='{}', summarize=3, name=None ) 
tf.image.stateless_sample_distorted_bounding_box( image_size, bounding_boxes, seed, min_object_covered=0.1, aspect_ratio_range=None, area_range=None, max_attempts=None, use_image_if_no_bounding_boxes=None, name=None ) 
tf.nn.max_pool2d( input, ksize, strides, padding, data_format='NHWC', name=None ) 
tf.keras.layers.InputSpec( dtype=None, shape=None, ndim=None, max_ndim=None, min_ndim=None, axes=None, allow_last_axis_squeeze=(False), name=None ) 
tf.keras.metrics.sparse_top_k_categorical_accuracy( y_true, y_pred, k=5 ) 
tf.data.experimental.service.register_dataset( service, dataset ) 
tf.keras.applications.InceptionV3( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax' ) 
tf.math.add_n( inputs, name=None ) 
tf.keras.layers.experimental.preprocessing.Normalization( axis=-1, dtype=None, mean=None, variance=None, **kwargs ) 
tf.estimator.MultiHead( heads, head_weights=None ) 
tf.keras.losses.MSE( y_true, y_pred ) 
tf.signal.rfft2d( input_tensor, fft_length=None, name=None ) 
tf.keras.layers.LocallyConnected1D( filters, kernel_size, strides=1, padding='valid', data_format=None, activation=None, use_bias=(True), kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, implementation=1, **kwargs ) 
tf.math.cosh( x, name=None ) 
tf.linalg.LinearOperatorComposition( operators, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name=None ) 
tf.keras.datasets.boston_housing.load_data( path='boston_housing.npz', test_split=0.2, seed=113 ) 
tf.keras.metrics.Precision( thresholds=None, top_k=None, class_id=None, name=None, dtype=None ) 
tf.experimental.numpy.ravel( a ) 
tf.keras.utils.Progbar( target, width=30, verbose=1, interval=0.05, stateful_metrics=None, unit_name='step' ) 
tf.estimator.BoostedTreesEstimator( feature_columns, n_batches_per_layer, head, model_dir=None, weight_column=None, n_trees=100, max_depth=6, learning_rate=0.1, l1_regularization=0.0, l2_regularization=0.0, tree_complexity=0.0, min_node_weight=0.0, config=None, center_bias=(False), pruning_mode='none', quantile_sketch_epsilon=0.01 ) 
tf.experimental.numpy.vander( x, N=None, increasing=(False) ) 
tf.experimental.numpy.arccos( x ) 
tf.keras.experimental.LinearModel( units=1, activation=None, use_bias=(True), kernel_initializer='zeros', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, **kwargs ) 
tf.math.erfcinv( x, name=None ) 
tf.py_function( func, inp, Tout, name=None ) 
tf.experimental.numpy.all( a, axis=None, keepdims=None ) 
tf.bitwise.bitwise_or( x, y, name=None ) 
tf.keras.utils.OrderedEnqueuer( sequence, use_multiprocessing=(False), shuffle=(False) ) 
tf.nn.gelu( features, approximate=(False), name=None ) 
tf.experimental.numpy.multiply( x1, x2 ) 
tf.linalg.eigvalsh( tensor, name=None ) 
tf.sparse.cross_hashed( inputs, num_buckets=0, hash_key=None, name=None ) 
tf.experimental.numpy.cbrt( x ) 
tf.experimental.numpy.vsplit( ary, indices_or_sections ) 
tf.keras.losses.MAE( y_true, y_pred ) 
tf.norm( tensor, ord='euclidean', axis=None, keepdims=None, name=None ) 
tf.keras.layers.experimental.preprocessing.CategoryEncoding( max_tokens=None, output_mode=BINARY, sparse=(False), **kwargs ) 
tf.estimator.classifier_parse_example_spec( feature_columns, label_key, label_dtype=tf.dtypes.int64, label_default=None, weight_column=None ) 
tf.experimental.numpy.float_power( x1, x2 ) 
tf.keras.layers.subtract( inputs, **kwargs ) 
tf.keras.applications.imagenet_utils.decode_predictions( preds, top=5 ) 
tf.keras.layers.minimum( inputs, **kwargs ) 
tf.experimental.numpy.min( a, axis=None, keepdims=None ) 
tf.keras.applications.inception_v3.decode_predictions( preds, top=5 ) 
tf.experimental.numpy.size( x, axis=None ) 
tf.keras.callbacks.RemoteMonitor( root='http://localhost:9000', path='/publish/epoch/end/', field='data', headers=None, send_as_json=(False) ) 
tf.experimental.numpy.nanmean( a, axis=None, dtype=None, keepdims=None ) 
tf.image.total_variation( images, name=None ) 
tf.io.read_file( filename, name=None ) 
tf.math.xdivy( x, y, name=None ) 
tf.recompute_grad( f ) 
tf.image.flip_left_right( image ) 
tf.keras.callbacks.experimental.BackupAndRestore( backup_dir ) 
tf.math.floor( x, name=None ) 
tf.estimator.experimental.make_stop_at_checkpoint_step_hook( estimator, last_step, wait_after_file_check_secs=30 ) 
tf.keras.layers.Conv2D( filters, kernel_size, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1), groups=1, activation=None, use_bias=(True), kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs ) 
tf.nn.max_pool1d( input, ksize, strides, padding, data_format='NWC', name=None ) 
tf.data.experimental.copy_to_device( target_device, source_device='/cpu:0' ) 
tf.lite.TFLiteConverter( funcs, trackable_obj=None ) 
tf.where( condition, x=None, y=None, name=None ) 
tf.nn.weighted_moments( x, axes, frequency_weights, keepdims=(False), name=None ) 
tf.experimental.numpy.nanprod( a, axis=None, dtype=None, keepdims=(False) ) 
tf.keras.applications.vgg19.decode_predictions( preds, top=5 ) 
tf.data.experimental.Reducer( init_func, reduce_func, finalize_func ) 
tf.math.greater_equal( x, y, name=None ) 
tf.math.reduce_euclidean_norm( input_tensor, axis=None, keepdims=(False), name=None ) 
tf.experimental.numpy.argsort( a, axis=-1, kind='quicksort', order=None ) 
tf.sparse.softmax( sp_input, name=None ) 
tf.keras.layers.Softmax( axis=-1, **kwargs ) 
tf.sparse.maximum( sp_a, sp_b, name=None ) 
tf.linalg.band_part( input, num_lower, num_upper, name=None ) 
tf.image.adjust_gamma( image, gamma=1, gain=1 ) 
tf.image.ssim_multiscale( img1, img2, max_val, power_factors=_MSSSIM_WEIGHTS, filter_size=11, filter_sigma=1.5, k1=0.01, k2=0.03 ) 
tf.experimental.numpy.logical_xor( x1, x2 ) 
tf.experimental.numpy.sin( x ) 
tf.train.load_checkpoint( ckpt_dir_or_file ) 
tf.experimental.numpy.ix_( *args ) 
tf.math.logical_xor( x, y, name='LogicalXor' ) 
tf.nn.avg_pool1d( input, ksize, strides, padding, data_format='NWC', name=None ) 
tf.size( input, out_type=tf.dtypes.int32, name=None ) 
tf.estimator.FinalExporter( name, serving_input_receiver_fn, assets_extra=None, as_text=(False) ) 
tf.sparse.mask( a, mask_indices, name=None ) 
tf.linalg.LinearOperatorFullMatrix( matrix, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorFullMatrix' ) 
tf.keras.experimental.NoisyLinearCosineDecay( initial_learning_rate, decay_steps, initial_variance=1.0, variance_decay=0.55, num_periods=0.5, alpha=0.0, beta=0.001, name=None ) 
tf.nn.conv3d( input, filters, strides, padding, data_format='NDHWC', dilations=None, name=None ) 
tf.nn.depthwise_conv2d( input, filter, strides, padding, data_format=None, dilations=None, name=None ) 
tf.math.special.fresnel_sin( x, name=None ) 
tf.linalg.normalize( tensor, ord='euclidean', axis=None, name=None ) 
tf.experimental.numpy.remainder( x1, x2 ) 
tf.tensor_scatter_nd_update( tensor, indices, updates, name=None ) 
tf.math.rint( x, name=None ) 
tf.squeeze( input, axis=None, name=None ) 
tf.experimental.numpy.rad2deg( x ) 
tf.image.generate_bounding_box_proposals( scores, bbox_deltas, image_info, anchors, nms_threshold=0.7, pre_nms_topn=6000, min_size=16, post_nms_topn=300, name=None ) 
tf.estimator.BoostedTreesRegressor( feature_columns, n_batches_per_layer, model_dir=None, label_dimension=1, weight_column=None, n_trees=100, max_depth=6, learning_rate=0.1, l1_regularization=0.0, l2_regularization=0.0, tree_complexity=0.0, min_node_weight=0.0, config=None, center_bias=(False), pruning_mode='none', quantile_sketch_epsilon=0.01, train_in_memory=(False) ) 
tf.strings.length( input, unit='BYTE', name=None ) 
tf.keras.backend.get_uid( prefix='' ) 
tf.keras.layers.Lambda( function, output_shape=None, mask=None, arguments=None, **kwargs ) 
tf.image.yiq_to_rgb( images ) 
tf.keras.applications.resnet_v2.decode_predictions( preds, top=5 ) 
tf.feature_column.weighted_categorical_column( categorical_column, weight_feature_key, dtype=tf.dtypes.float32 ) 
tf.linalg.LinearOperatorCirculant( spectrum, input_output_dtype=tf.dtypes.complex64, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=(True), name='LinearOperatorCirculant' ) 
tf.experimental.numpy.take( a, indices, axis=None, out=None, mode='clip' ) 
tf.experimental.numpy.allclose( a, b, rtol=1e-05, atol=1e-08, equal_nan=(False) ) 
tf.unstack( value, num=None, axis=0, name='unstack' ) 
tf.saved_model.contains_saved_model( export_dir ) 
tf.nn.sparse_softmax_cross_entropy_with_logits( labels, logits, name=None ) 
tf.meshgrid( *args, **kwargs ) 
tf.math.reduce_any( input_tensor, axis=None, keepdims=(False), name=None ) 
tf.keras.Model( *args, **kwargs ) 
tf.keras.initializers.HeNormal( seed=None ) 
tf.math.unsorted_segment_sqrt_n( data, segment_ids, num_segments, name=None ) 
tf.ragged.cross_hashed( inputs, num_buckets=0, hash_key=None, name=None ) 
tf.audio.decode_wav( contents, desired_channels=-1, desired_samples=-1, name=None ) 
tf.experimental.numpy.tri( N, M=None, k=0, dtype=None ) 
tf.compat.as_bytes( bytes_or_text, encoding='utf-8' ) 
tf.strings.to_number( input, out_type=tf.dtypes.float32, name=None ) 
tf.experimental.numpy.where( condition, x=None, y=None ) 
tf.experimental.numpy.identity( n, dtype=float ) 
tf.boolean_mask( tensor, mask, axis=None, name='boolean_mask' ) 
tf.keras.initializers.LecunUniform( seed=None ) 
tf.quantization.quantize_and_dequantize( input, input_min, input_max, signed_input=(True), num_bits=8, range_given=(False), round_mode='HALF_TO_EVEN', name=None, narrow_range=(False), axis=None ) 
tf.keras.applications.EfficientNetB4( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs ) 
tf.quantization.fake_quant_with_min_max_args( inputs, min=-6, max=6, num_bits=8, narrow_range=(False), name=None ) 
tf.strings.strip( input, name=None ) 
tf.experimental.numpy.sort( a, axis=-1, kind='quicksort', order=None ) 
tf.estimator.SessionRunContext( original_args, session ) 
tf.experimental.numpy.copy( a ) 
tf.experimental.numpy.sinh( x ) 
tf.keras.layers.Dense( units, activation=None, use_bias=(True), kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs ) 
tf.keras.layers.experimental.preprocessing.Hashing( num_bins, salt=None, name=None, **kwargs ) 
tf.keras.initializers.Identity( gain=1.0 ) 
tf.math.asinh( x, name=None ) 
tf.image.crop_and_resize( image, boxes, box_indices, crop_size, method='bilinear', extrapolation_value=0, name=None ) 
tf.keras.layers.Conv1D( filters, kernel_size, strides=1, padding='valid', data_format='channels_last', dilation_rate=1, groups=1, activation=None, use_bias=(True), kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs ) 
tf.nn.RNNCellResidualWrapper( *args, **kwargs ) 
tf.strings.split( input, sep=None, maxsplit=-1, name=None ) 
tf.math.special.bessel_k0e( x, name=None ) 
tf.numpy_function( func, inp, Tout, name=None ) 
tf.dynamic_partition( data, partitions, num_partitions, name=None ) 
tf.keras.losses.huber( y_true, y_pred, delta=1.0 ) 
tf.keras.constraints.get( identifier ) 
tf.strings.regex_replace( input, pattern, rewrite, replace_global=(True), name=None ) 
tf.data.experimental.bucket_by_sequence_length( element_length_func, bucket_boundaries, bucket_batch_sizes, padded_shapes=None, padding_values=None, pad_to_bucket_boundary=(False), no_padding=(False), drop_remainder=(False) ) 
tf.keras.layers.GlobalAveragePooling3D( data_format=None, **kwargs ) 
tf.keras.preprocessing.image.random_zoom( x, zoom_range, row_axis=1, col_axis=2, channel_axis=0, fill_mode='nearest', cval=0.0, interpolation_order=1 ) 
tf.estimator.experimental.make_early_stopping_hook( estimator, should_stop_fn, run_every_secs=60, run_every_steps=None ) 
tf.keras.metrics.Recall( thresholds=None, top_k=None, class_id=None, name=None, dtype=None ) 
tf.io.gfile.glob( pattern ) 
tf.estimator.DNNLinearCombinedClassifier( model_dir=None, linear_feature_columns=None, linear_optimizer='Ftrl', dnn_feature_columns=None, dnn_optimizer='Adagrad', dnn_hidden_units=None, dnn_activation_fn=tf.nn.relu, dnn_dropout=None, n_classes=2, weight_column=None, label_vocabulary=None, config=None, warm_start_from=None, loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE, batch_norm=(False), linear_sparse_combiner='sum' ) 
tf.keras.metrics.TruePositives( thresholds=None, name=None, dtype=None ) 
tf.keras.layers.experimental.preprocessing.RandomTranslation( height_factor, width_factor, fill_mode='reflect', interpolation='bilinear', seed=None, name=None, fill_value=0.0, **kwargs ) 
tf.sparse.reshape( sp_input, shape, name=None ) 
tf.signal.ifft2d( input, name=None ) 
tf.experimental.numpy.linspace( start, stop, num=50, endpoint=(True), retstep=(False), dtype=float, axis=0 ) 
tf.keras.activations.softmax( x, axis=-1 ) 
tf.math.segment_mean( data, segment_ids, name=None ) 
tf.experimental.numpy.ones( shape, dtype=float ) 
tf.sparse.split( sp_input=None, num_split=None, axis=None, name=None ) 
tf.io.gfile.remove( path ) 
tf.image.extract_glimpse( input, size, offsets, centered=(True), normalized=(True), noise='uniform', name=None ) 
tf.keras.regularizers.L1L2( l1=0.0, l2=0.0 ) 
tf.data.experimental.cardinality( dataset ) 
tf.signal.vorbis_window( window_length, dtype=tf.dtypes.float32, name=None ) 
tf.feature_column.sequence_numeric_column( key, shape=(1,), default_value=0.0, dtype=tf.dtypes.float32, normalizer_fn=None ) 
tf.batch_to_space( input, block_shape, crops, name=None ) 
tf.math.erfinv( x, name=None ) 
tf.linalg.LinearOperatorDiag( diag, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorDiag' ) 
tf.keras.models.model_from_yaml( yaml_string, custom_objects=None ) 
tf.case( pred_fn_pairs, default=None, exclusive=(False), strict=(False), name='case' ) 
tf.data.experimental.ignore_errors( log_warning=(False) ) 
tf.experimental.numpy.negative( x ) 
tf.keras.layers.Layer( trainable=(True), name=None, dtype=None, dynamic=(False), **kwargs ) 
tf.feature_column.make_parse_example_spec( feature_columns ) 
tf.io.gfile.makedirs( path ) 
tf.foldr( fn, elems, initializer=None, parallel_iterations=10, back_prop=(True), swap_memory=(False), name=None ) 
tf.keras.optimizers.Adamax( learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, name='Adamax', **kwargs ) 
tf.experimental.numpy.isnan( x ) 
tf.sparse.reorder( sp_input, name=None ) 
tf.io.gfile.GFile( name, mode='r' ) 
tf.image.non_max_suppression_padded( boxes, scores, max_output_size, iou_threshold=0.5, score_threshold=float('-inf'), pad_to_max_output_size=(False), name=None, sorted_input=(False), canonicalized_coordinates=(False), tile_size=512 ) 
tf.math.zeta( x, q, name=None ) 
tf.experimental.numpy.logaddexp( x1, x2 ) 
tf.keras.mixed_precision.Policy( name ) 
tf.keras.metrics.SensitivityAtSpecificity( specificity, num_thresholds=200, name=None, dtype=None ) 
tf.nn.softmax( logits, axis=None, name=None ) 
tf.pad( tensor, paddings, mode='CONSTANT', constant_values=0, name=None ) 
tf.experimental.numpy.isscalar( num ) 
tf.math.negative( x, name=None ) 
tf.keras.applications.resnet.decode_predictions( preds, top=5 ) 
tf.keras.preprocessing.image.random_shift( x, wrg, hrg, row_axis=1, col_axis=2, channel_axis=0, fill_mode='nearest', cval=0.0, interpolation_order=1 ) 
tf.keras.metrics.PrecisionAtRecall( recall, num_thresholds=200, name=None, dtype=None ) 
tf.experimental.numpy.exp( x ) 
tf.queue.PriorityQueue( capacity, types, shapes=None, names=None, shared_name=None, name='priority_queue' ) 
tf.keras.backend.set_epsilon( value ) 
tf.keras.applications.imagenet_utils.preprocess_input( x, data_format=None, mode='caffe' ) 
tf.train.checkpoints_iterator( checkpoint_dir, min_interval_secs=0, timeout=None, timeout_fn=None ) 
tf.required_space_to_batch_paddings( input_shape, block_shape, base_paddings=None, name=None ) 
tf.experimental.numpy.minimum( x1, x2 ) 
tf.keras.metrics.SparseTopKCategoricalAccuracy( k=5, name='sparse_top_k_categorical_accuracy', dtype=None ) 
tf.keras.layers.Masking( mask_value=0.0, **kwargs ) 
tf.keras.constraints.MinMaxNorm( min_value=0.0, max_value=1.0, rate=1.0, axis=0 ) 
tf.keras.layers.SpatialDropout3D( rate, data_format=None, **kwargs ) 
tf.io.decode_and_crop_jpeg( contents, crop_window, channels=0, ratio=1, fancy_upscaling=(True), try_recover_truncated=(False), acceptable_fraction=1, dct_method='', name=None ) 
tf.experimental.numpy.random.randint( low, high=None, size=None, dtype=onp.int ) 
tf.keras.preprocessing.sequence.pad_sequences( sequences, maxlen=None, dtype='int32', padding='pre', truncating='pre', value=0.0 ) 
tf.math.cumulative_logsumexp( x, axis=0, exclusive=(False), reverse=(False), name=None ) 
tf.bitwise.left_shift( x, y, name=None ) 
tf.keras.layers.experimental.preprocessing.PreprocessingLayer( trainable=(True), name=None, dtype=None, dynamic=(False), **kwargs ) 
tf.signal.inverse_stft( stfts, frame_length, frame_step, fft_length=None, window_fn=tf.signal.hann_window, name=None ) 
tf.experimental.numpy.stack( arrays, axis=0 ) 
tf.math.accumulate_n( inputs, shape=None, tensor_dtype=None, name=None ) 
tf.math.tanh( x, name=None ) 
tf.estimator.SecondOrStepTimer( every_secs=None, every_steps=None ) 
tf.ragged.boolean_mask( data, mask, name=None ) 
tf.keras.utils.SequenceEnqueuer( sequence, use_multiprocessing=(False) ) 
tf.math.reduce_mean( input_tensor, axis=None, keepdims=(False), name=None ) 
tf.reverse_sequence( input, seq_lengths, seq_axis=None, batch_axis=None, name=None ) 
tf.linalg.LinearOperatorBlockDiag( operators, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=(True), name=None ) 
tf.image.combined_non_max_suppression( boxes, scores, max_output_size_per_class, max_total_size, iou_threshold=0.5, score_threshold=float('-inf'), pad_per_class=(False), clip_boxes=(True), name=None ) 
tf.experimental.numpy.imag( val ) 
tf.nn.silu( features ) 
tf.experimental.numpy.logical_or( x1, x2 ) 
tf.math.acos( x, name=None ) 
tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient( gradients, inputs, min, max, num_bits=8, narrow_range=(False), name=None ) 
tf.mixed_precision.experimental.DynamicLossScale( initial_loss_scale=(2 ** 15), increment_period=2000, multiplier=2.0 ) 
tf.keras.layers.deserialize( config, custom_objects=None ) 
tf.keras.applications.ResNet101( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, **kwargs ) 
tf.keras.optimizers.Adam( learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, amsgrad=(False), name='Adam', **kwargs ) 
tf.math.sin( x, name=None ) 
tf.strings.to_hash_bucket_strong( input, num_buckets, key, name=None ) 
tf.experimental.numpy.isclose( a, b, rtol=1e-05, atol=1e-08, equal_nan=(False) ) 
tf.keras.regularizers.L1( l1=0.01, **kwargs ) 
tf.math.squared_difference( x, y, name=None ) 
tf.keras.metrics.BinaryCrossentropy( name='binary_crossentropy', dtype=None, from_logits=(False), label_smoothing=0 ) 
tf.keras.losses.MeanAbsoluteError( reduction=losses_utils.ReductionV2.AUTO, name='mean_absolute_error' ) 
tf.math.in_top_k( targets, predictions, k, name=None ) 
tf.keras.models.model_from_json( json_string, custom_objects=None ) 
tf.linalg.LinearOperatorCirculant3D( spectrum, input_output_dtype=tf.dtypes.complex64, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=(True), name='LinearOperatorCirculant3D' ) 
tf.strings.bytes_split( input, name=None ) 
tf.Operation( node_def, g, inputs=None, output_types=None, control_inputs=None, input_types=None, original_op=None, op_def=None ) 
tf.experimental.numpy.vstack( tup ) 
tf.image.stateless_random_hue( image, max_delta, seed ) 
tf.experimental.numpy.divide( x1, x2 ) 
tf.keras.callbacks.TensorBoard( log_dir='logs', histogram_freq=0, write_graph=(True), write_images=(False), update_freq='epoch', profile_batch=2, embeddings_freq=0, embeddings_metadata=None, **kwargs ) 
tf.experimental.numpy.vdot( a, b ) 
tf.ones_like( input, dtype=None, name=None ) 
tf.experimental.numpy.heaviside( x1, x2 ) 
tf.image.adjust_saturation( image, saturation_factor, name=None ) 
tf.keras.callbacks.ReduceLROnPlateau( monitor='val_loss', factor=0.1, patience=10, verbose=0, mode='auto', min_delta=0.0001, cooldown=0, min_lr=0, **kwargs ) 
tf.keras.backend.rnn( step_function, inputs, initial_states, go_backwards=(False), mask=None, constants=None, unroll=(False), input_length=None, time_major=(False), zero_output_for_mask=(False) ) 
tf.keras.losses.categorical_crossentropy( y_true, y_pred, from_logits=(False), label_smoothing=0 ) 
tf.experimental.numpy.ndim( a ) 
tf.keras.optimizers.get( identifier ) 
tf.experimental.numpy.arctan( x ) 
tf.estimator.LinearClassifier( feature_columns, model_dir=None, n_classes=2, weight_column=None, label_vocabulary=None, optimizer='Ftrl', config=None, warm_start_from=None, loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE, sparse_combiner='sum' ) 
tf.keras.applications.MobileNetV3Large( input_shape=None, alpha=1.0, minimalistic=(False), include_top=(True), weights='imagenet', input_tensor=None, classes=1000, pooling=None, dropout_rate=0.2, classifier_activation='softmax' ) 
tf.keras.layers.UpSampling2D( size=(2, 2), data_format=None, interpolation='nearest', **kwargs ) 
tf.experimental.numpy.tril( m, k=0 ) 
tf.estimator.RunConfig( model_dir=None, tf_random_seed=None, save_summary_steps=100, save_checkpoints_steps=_USE_DEFAULT, save_checkpoints_secs=_USE_DEFAULT, session_config=None, keep_checkpoint_max=5, keep_checkpoint_every_n_hours=10000, log_step_count_steps=100, train_distribute=None, device_fn=None, protocol=None, eval_distribute=None, experimental_distribute=None, experimental_max_worker_delay_secs=None, session_creation_timeout_secs=7200, checkpoint_save_graph_def=(True) ) 
tf.image.rgb_to_hsv( images, name=None ) 
tf.keras.applications.DenseNet169( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000 ) 
tf.random.stateless_poisson( shape, seed, lam, dtype=tf.dtypes.int32, name=None ) 
tf.math.sinh( x, name=None ) 
tf.bitwise.right_shift( x, y, name=None ) 
tf.experimental.numpy.arctanh( x ) 
tf.experimental.numpy.outer( a, b ) 
tf.io.gfile.exists( path ) 
tf.keras.applications.DenseNet201( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000 ) 
tf.data.experimental.DistributeOptions() 
tf.sparse.slice( sp_input, start, size, name=None ) 
tf.experimental.numpy.gcd( x1, x2 ) 
tf.nn.ctc_beam_search_decoder( inputs, sequence_length, beam_width=100, top_paths=1 ) 
tf.experimental.numpy.ascontiguousarray( a, dtype=None ) 
tf.experimental.numpy.einsum( subscripts, *operands, **kwargs ) 
tf.io.serialize_many_sparse( sp_input, out_type=tf.dtypes.string, name=None ) 
tf.math.sign( x, name=None ) 
tf.keras.experimental.CosineDecayRestarts( initial_learning_rate, first_decay_steps, t_mul=2.0, m_mul=1.0, alpha=0.0, name=None ) 
tf.keras.layers.maximum( inputs, **kwargs ) 
tf.keras.applications.nasnet.decode_predictions( preds, top=5 ) 
tf.math.is_strictly_increasing( x, name=None ) 
tf.math.segment_prod( data, segment_ids, name=None ) 
tf.keras.datasets.reuters.load_data( path='reuters.npz', num_words=None, skip_top=0, maxlen=None, test_split=0.2, seed=113, start_char=1, oov_char=2, index_from=3, **kwargs ) 
tf.keras.constraints.UnitNorm( axis=0 ) 
tf.math.special.bessel_j1( x, name=None ) 
tf.image.adjust_contrast( images, contrast_factor ) 
tf.signal.mdct( signals, frame_length, window_fn=tf.signal.vorbis_window, pad_end=(False), norm=None, name=None ) 
tf.linalg.lu( input, output_idx_type=tf.dtypes.int32, name=None ) 
tf.linalg.eigvals( tensor, name=None ) 
tf.math.polyval( coeffs, x, name=None ) 
tf.math.special.bessel_k0( x, name=None ) 
tf.custom_gradient( f=None ) 
tf.experimental.numpy.geomspace( start, stop, num=50, endpoint=(True), dtype=None, axis=0 ) 
tf.estimator.NanTensorHook( loss_tensor, fail_on_nan_loss=(True) ) 
tf.image.stateless_random_saturation( image, lower, upper, seed=None ) 
tf.sort( values, axis=-1, direction='ASCENDING', name=None ) 
tf.keras.losses.hinge( y_true, y_pred ) 
tf.feature_column.categorical_column_with_identity( key, num_buckets, default_value=None ) 
tf.nn.conv3d_transpose( input, filters, output_shape, strides, padding='SAME', data_format='NDHWC', dilations=None, name=None ) 
tf.math.igamma( a, x, name=None ) 
tf.lite.RepresentativeDataset( input_gen ) 
tf.fingerprint( data, method='farmhash64', name=None ) 
tf.math.square( x, name=None ) 
tf.linalg.matmul( a, b, transpose_a=(False), transpose_b=(False), adjoint_a=(False), adjoint_b=(False), a_is_sparse=(False), b_is_sparse=(False), name=None ) 
tf.nn.RNNCellDeviceWrapper( *args, **kwargs ) 
tf.keras.preprocessing.image.load_img( path, grayscale=(False), color_mode='rgb', target_size=None, interpolation='nearest' ) 
tf.linalg.cholesky_solve( chol, rhs, name=None ) 
tf.nn.conv2d( input, filters, strides, padding, data_format='NHWC', dilations=None, name=None ) 
tf.linalg.lu_reconstruct( lower_upper, perm, validate_args=(False), name=None ) 
tf.keras.datasets.cifar10.load_data() 
tf.experimental.numpy.reciprocal( x ) 
tf.keras.losses.get( identifier ) 
tf.image.psnr( a, b, max_val, name=None ) 
tf.keras.activations.deserialize( name, custom_objects=None ) 
tf.experimental.numpy.squeeze( a, axis=None ) 
tf.lookup.StaticVocabularyTable( initializer, num_oov_buckets, lookup_key_dtype=None, name=None ) 
tf.math.special.bessel_j0( x, name=None ) 
tf.bitwise.invert( x, name=None ) 
tf.io.decode_base64( input, name=None ) 
tf.keras.layers.experimental.preprocessing.RandomContrast( factor, seed=None, name=None, **kwargs ) 
tf.linalg.global_norm( t_list, name=None ) 
tf.keras.initializers.TruncatedNormal( mean=0.0, stddev=0.05, seed=None ) 
tf.math.tan( x, name=None ) 
tf.data.experimental.enumerate_dataset( start=0 ) 
tf.sysconfig.get_lib() 
tf.keras.preprocessing.image.apply_channel_shift( x, intensity, channel_axis=0 ) 
tf.io.decode_proto( bytes, message_type, field_names, output_types, descriptor_source='local://', message_format='binary', sanitize=(False), name=None ) 
tf.experimental.numpy.trace( a, offset=0, axis1=0, axis2=1, dtype=None ) 
tf.data.experimental.StatsOptions() 
tf.tile( input, multiples, name=None ) 
tf.keras.losses.MeanAbsolutePercentageError( reduction=losses_utils.ReductionV2.AUTO, name='mean_absolute_percentage_error' ) 
tf.strings.unicode_split_with_offsets( input, input_encoding, errors='replace', replacement_char=65533, name=None ) 
tf.math.bessel_i0e( x, name=None ) 
tf.sparse.cross( inputs, name=None, separator=None ) 
tf.math.special.expint( x, name=None ) 
tf.stop_gradient( input, name=None ) 
tf.experimental.numpy.cos( x ) 
tf.io.decode_json_example( json_examples, name=None ) 
tf.linalg.lu_matrix_inverse( lower_upper, perm, validate_args=(False), name=None ) 
tf.keras.layers.AveragePooling3D( pool_size=(2, 2, 2), strides=None, padding='valid', data_format=None, **kwargs ) 
tf.signal.ifft3d( input, name=None ) 
tf.io.parse_example( serialized, features, example_names=None, name=None ) 
tf.lite.Interpreter( model_path=None, model_content=None, experimental_delegates=None, num_threads=None ) 
tf.keras.regularizers.get( identifier ) 
tf.data.experimental.map_and_batch( map_func, batch_size, num_parallel_batches=None, drop_remainder=(False), num_parallel_calls=None ) 
tf.nn.isotonic_regression( inputs, decreasing=(True), axis=-1 ) 
tf.math.unsorted_segment_min( data, segment_ids, num_segments, name=None ) 
tf.keras.layers.AbstractRNNCell( trainable=(True), name=None, dtype=None, dynamic=(False), **kwargs ) 
tf.keras.layers.Conv2DTranspose( filters, kernel_size, strides=(1, 1), padding='valid', output_padding=None, data_format=None, dilation_rate=(1, 1), activation=None, use_bias=(True), kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs ) 
tf.keras.metrics.SparseCategoricalCrossentropy( name='sparse_categorical_crossentropy', dtype=None, from_logits=(False), axis=-1 ) 
tf.math.atan( x, name=None ) 
tf.nn.softmax_cross_entropy_with_logits( labels, logits, axis=-1, name=None ) 
tf.math.reduce_std( input_tensor, axis=None, keepdims=(False), name=None ) 
tf.keras.applications.NASNetMobile( input_shape=None, include_top=(True), weights='imagenet', input_tensor=None, pooling=None, classes=1000 ) 
tf.keras.activations.exponential( x ) 
tf.math.reduce_all( input_tensor, axis=None, keepdims=(False), name=None ) 
tf.linalg.LinearOperatorToeplitz( col, row, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorToeplitz' ) 
tf.keras.layers.LSTMCell( units, activation='tanh', recurrent_activation='sigmoid', use_bias=(True), kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', unit_forget_bias=(True), kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, **kwargs ) 
tf.experimental.numpy.isreal( x ) 
tf.image.rot90( image, k=1, name=None ) 
tf.sparse.to_indicator( sp_input, vocab_size, name=None ) 
tf.keras.losses.poisson( y_true, y_pred ) 
tf.zeros( shape, dtype=tf.dtypes.float32, name=None ) 
tf.experimental.numpy.arctan2( x1, x2 ) 
tf.experimental.numpy.arange( start, stop=None, step=1, dtype=None ) 
tf.experimental.numpy.hypot( x1, x2 ) 
tf.feature_column.sequence_categorical_column_with_hash_bucket( key, hash_bucket_size, dtype=tf.dtypes.string ) 
tf.experimental.numpy.mean( a, axis=None, dtype=None, keepdims=None ) 
tf.keras.layers.GaussianDropout( rate, **kwargs ) 
tf.experimental.numpy.rot90( m, k=1, axes=(0, 1) ) 
tf.lite.TargetSpec( supported_ops=None, supported_types=None ) 
tf.random.all_candidate_sampler( true_classes, num_true, num_sampled, unique, seed=None, name=None ) 
tf.clip_by_value( t, clip_value_min, clip_value_max, name=None ) 
tf.strings.to_hash_bucket( input, num_buckets, name=None ) 
tf.keras.backend.floatx() 
tf.timestamp( name=None ) 
tf.keras.losses.MeanSquaredError( reduction=losses_utils.ReductionV2.AUTO, name='mean_squared_error' ) 
tf.experimental.numpy.compress( condition, a, axis=None ) 
tf.io.parse_tensor( serialized, out_type, name=None ) 
tf.keras.applications.EfficientNetB7( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs ) 
tf.linspace( start, stop, num, name=None, axis=0 ) 
tf.tensor_scatter_nd_max( tensor, indices, updates, name=None ) 
tf.linalg.solve( matrix, rhs, adjoint=(False), name=None ) 
tf.experimental.numpy.diagflat( v, k=0 ) 
tf.dtypes.saturate_cast( value, dtype, name=None ) 
tf.io.gfile.walk( top, topdown=(True), onerror=None ) 
tf.keras.optimizers.schedules.deserialize( config, custom_objects=None ) 
tf.keras.optimizers.schedules.InverseTimeDecay( initial_learning_rate, decay_steps, decay_rate, staircase=(False), name=None ) 
tf.io.deserialize_many_sparse( serialized_sparse, dtype, rank=None, name=None ) 
tf.linalg.LinearOperatorAdjoint( operator, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name=None ) 
tf.math.multiply_no_nan( x, y, name=None ) 
tf.keras.preprocessing.sequence.skipgrams( sequence, vocabulary_size, window_size=4, negative_samples=1.0, shuffle=(True), categorical=(False), sampling_table=None, seed=None ) 
tf.print( *inputs, **kwargs ) 
tf.keras.optimizers.schedules.PolynomialDecay( initial_learning_rate, decay_steps, end_learning_rate=0.0001, power=1.0, cycle=(False), name=None ) 
tf.image.non_max_suppression_with_scores( boxes, scores, max_output_size, iou_threshold=0.5, score_threshold=float('-inf'), soft_nms_sigma=0.0, name=None ) 
tf.xla.experimental.compile( computation, inputs=None ) 
tf.keras.metrics.CategoricalCrossentropy( name='categorical_crossentropy', dtype=None, from_logits=(False), label_smoothing=0 ) 
tf.math.erf( x, name=None ) 
tf.compat.as_text( bytes_or_text, encoding='utf-8' ) 
tf.tensor_scatter_nd_sub( tensor, indices, updates, name=None ) 
tf.keras.utils.CustomObjectScope( *args ) 
tf.math.log1p( x, name=None ) 
tf.image.random_crop( value, size, seed=None, name=None ) 
tf.keras.applications.efficientnet.preprocess_input( x, data_format=None ) 
tf.sparse.map_values( op, *args, **kwargs ) 
tf.keras.preprocessing.image.save_img( path, x, data_format=None, file_format=None, scale=(True), **kwargs ) 
tf.io.gfile.stat( path ) 
tf.keras.layers.Average( **kwargs )
tf.image.draw_bounding_boxes( images, boxes, colors, name=None ) 
tf.experimental.numpy.meshgrid( *xi, **kwargs ) 
tf.dynamic_stitch( indices, data, name=None ) 
tf.io.encode_jpeg( image, format='', quality=95, progressive=(False), optimize_size=(False), chroma_downsampling=(True), density_unit='in', x_density=300, y_density=300, xmp_metadata='', name=None ) 
tf.linalg.set_diag( input, diagonal, name='set_diag', k=0, align='RIGHT_LEFT' ) 
tf.keras.preprocessing.image.ImageDataGenerator( featurewise_center=(False), samplewise_center=(False), featurewise_std_normalization=(False), samplewise_std_normalization=(False), zca_whitening=(False), zca_epsilon=1e-06, rotation_range=0, width_shift_range=0.0, height_shift_range=0.0, brightness_range=None, shear_range=0.0, zoom_range=0.0, channel_shift_range=0.0, fill_mode='nearest', cval=0.0, horizontal_flip=(False), vertical_flip=(False), rescale=None, preprocessing_function=None, data_format=None, validation_split=0.0, dtype=None ) 
tf.keras.initializers.LecunNormal( seed=None ) 
tf.keras.datasets.imdb.get_word_index( path='imdb_word_index.json' ) 
tf.image.hsv_to_rgb( images, name=None ) 
tf.math.floordiv( x, y, name=None ) 
tf.keras.preprocessing.sequence.TimeseriesGenerator( data, targets, length, sampling_rate=1, stride=1, start_index=0, end_index=None, shuffle=(False), reverse=(False), batch_size=128 ) 
tf.keras.regularizers.deserialize( config, custom_objects=None ) 
tf.experimental.numpy.max( a, axis=None, keepdims=None ) 
tf.math.divide( x, y, name=None ) 
tf.math.imag( input, name=None ) 
tf.keras.layers.experimental.preprocessing.TextVectorization( max_tokens=None, standardize=LOWER_AND_STRIP_PUNCTUATION, split=SPLIT_ON_WHITESPACE, ngrams=None, output_mode=INT, output_sequence_length=None, pad_to_max_tokens=(True), vocabulary=None, **kwargs ) 
tf.linalg.diag_part( input, name='diag_part', k=0, padding_value=0, align='RIGHT_LEFT' ) 
tf.nn.softsign( features, name=None ) 
tf.signal.hann_window( window_length, periodic=(True), dtype=tf.dtypes.float32, name=None ) 
tf.data.experimental.from_variant( variant, structure ) 
tf.quantization.fake_quant_with_min_max_vars( inputs, min, max, num_bits=8, narrow_range=(False), name=None ) 
tf.keras.layers.experimental.preprocessing.Discretization( bins, **kwargs ) 
tf.experimental.numpy.empty( shape, dtype=float ) 
tf.keras.applications.mobilenet_v3.decode_predictions( preds, top=5 ) 
tf.keras.initializers.zeros()
tf.train.latest_checkpoint( checkpoint_dir, latest_filename=None ) 
tf.estimator.MultiLabelHead( n_classes, weight_column=None, thresholds=None, label_vocabulary=None, loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE, loss_fn=None, classes_for_class_based_metrics=None, name=None ) 
tf.nn.weighted_cross_entropy_with_logits( labels, logits, pos_weight, name=None ) 
tf.random.stateless_categorical( logits, num_samples, seed, dtype=tf.dtypes.int64, name=None ) 
tf.math.unsorted_segment_prod( data, segment_ids, num_segments, name=None ) 
tf.data.experimental.service.from_dataset_id( processing_mode, service, dataset_id, element_spec=None, job_name=None, max_outstanding_requests=None ) 
tf.quantization.fake_quant_with_min_max_args_gradient( gradients, inputs, min=-6, max=6, num_bits=8, narrow_range=(False), name=None ) 
tf.signal.inverse_stft_window_fn( frame_step, forward_window_fn=tf.signal.hann_window, name=None ) 
tf.experimental.numpy.around( a, decimals=0 ) 
tf.image.stateless_random_flip_left_right( image, seed ) 
tf.data.experimental.get_single_element( dataset ) 
tf.keras.layers.AveragePooling2D( pool_size=(2, 2), strides=None, padding='valid', data_format=None, **kwargs ) 
tf.keras.utils.pack_x_y_sample_weight( x, y=None, sample_weight=None ) 
tf.math.l2_normalize( x, axis=None, epsilon=1e-12, name=None ) 
tf.keras.layers.ConvLSTM2D( filters, kernel_size, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1), activation='tanh', recurrent_activation='hard_sigmoid', use_bias=(True), kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', unit_forget_bias=(True), kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, return_sequences=(False), return_state=(False), go_backwards=(False), stateful=(False), dropout=0.0, recurrent_dropout=0.0, **kwargs ) 
tf.math.special.dawsn( x, name=None ) 
tf.mixed_precision.experimental.LossScale() 
tf.linalg.lstsq( matrix, rhs, l2_regularizer=0.0, fast=(True), name=None ) 
tf.sparse.minimum( sp_a, sp_b, name=None ) 
tf.strings.join( inputs, separator='', name=None ) 
tf.experimental.numpy.atleast_2d( *arys ) 
tf.io.encode_png( image, compression=-1, name=None ) 
tf.keras.layers.serialize( layer ) 
tf.experimental.numpy.append( arr, values, axis=None ) 
tf.estimator.experimental.LinearSDCA( example_id_column, num_loss_partitions=1, num_table_shards=None, symmetric_l1_regularization=0.0, symmetric_l2_regularization=1.0, adaptive=(False) ) 
tf.linalg.tensor_diag( diagonal, name=None ) 
tf.map_fn( fn, elems, dtype=None, parallel_iterations=None, back_prop=(True), swap_memory=(False), infer_shape=(True), name=None, fn_output_signature=None ) 
tf.keras.mixed_precision.experimental.Policy( name, loss_scale='auto' ) 
tf.experimental.numpy.inner( a, b ) 
tf.keras.preprocessing.image.Iterator( n, batch_size, shuffle, seed ) 
tf.experimental.numpy.random.randn( *args ) 
tf.sparse.from_dense( tensor, name=None ) 
tf.random.set_seed( seed ) 
tf.truncatediv( x, y, name=None ) 
tf.linalg.cross( a, b, name=None ) 
tf.keras.metrics.Accuracy( name='accuracy', dtype=None ) 
tf.keras.losses.deserialize( name, custom_objects=None ) 
tf.device( device_name ) 
tf.mlir.experimental.convert_function( concrete_function, pass_pipeline='tf-standard-pipeline' ) 
tf.math.greater( x, y, name=None ) 
tf.experimental.numpy.moveaxis( a, source, destination ) 
tf.keras.constraints.MaxNorm( max_value=2, axis=0 ) 
tf.image.pad_to_bounding_box( image, offset_height, offset_width, target_height, target_width ) 
tf.keras.optimizers.schedules.ExponentialDecay( initial_learning_rate, decay_steps, decay_rate, staircase=(False), name=None ) 
tf.math.maximum( x, y, name=None ) 
tf.keras.metrics.SquaredHinge( name='squared_hinge', dtype=None ) 
tf.estimator.StepCounterHook( every_n_steps=100, every_n_secs=None, output_dir=None, summary_writer=None ) 
tf.keras.backend.clear_session() 
tf.math.is_finite( x, name=None ) 
tf.experimental.numpy.ones_like( a, dtype=None ) 
tf.keras.metrics.categorical_accuracy( y_true, y_pred ) 
tf.math.reciprocal( x, name=None ) 
tf.nn.log_softmax( logits, axis=None, name=None ) 
tf.keras.mixed_precision.global_policy() 
tf.experimental.numpy.amax( a, axis=None, keepdims=None ) 
tf.data.experimental.scan( initial_state, scan_func ) 
tf.signal.rfft3d( input_tensor, fft_length=None, name=None ) 
tf.estimator.BestExporter( name='best_exporter', serving_input_receiver_fn=None, event_file_pattern='eval/*.tfevents.*', compare_fn=_loss_smaller, assets_extra=None, as_text=(False), exports_to_keep=5 ) 
tf.broadcast_dynamic_shape( shape_x, shape_y ) 
tf.experimental.numpy.average( a, axis=None, weights=None, returned=(False) ) 
tf.keras.metrics.MeanIoU( num_classes, name=None, dtype=None ) 
tf.io.decode_raw( input_bytes, out_type, little_endian=(True), fixed_length=None, name=None ) 
tf.random.stateless_truncated_normal( shape, seed, mean=0.0, stddev=1.0, dtype=tf.dtypes.float32, name=None ) 
tf.keras.preprocessing.image.array_to_img( x, data_format=None, scale=(True), dtype=None ) 
tf.experimental.numpy.bitwise_xor( x1, x2 ) 
tf.keras.layers.experimental.preprocessing.StringLookup( max_tokens=None, num_oov_indices=1, mask_token='', oov_token='[UNK]', vocabulary=None, encoding=None, invert=(False), **kwargs ) 
tf.keras.metrics.KLDivergence( name='kullback_leibler_divergence', dtype=None ) 
tf.keras.datasets.cifar100.load_data( label_mode='fine' ) 
tf.nn.avg_pool2d( input, ksize, strides, padding, data_format='NHWC', name=None ) 
tf.convert_to_tensor( value, dtype=None, dtype_hint=None, name=None ) 
tf.keras.metrics.BinaryAccuracy( name='binary_accuracy', dtype=None, threshold=0.5 ) 
tf.image.crop_to_bounding_box( image, offset_height, offset_width, target_height, target_width ) 
tf.keras.applications.vgg19.preprocess_input( x, data_format=None ) 
tf.keras.applications.xception.preprocess_input( x, data_format=None ) 
tf.keras.preprocessing.text.Tokenizer( num_words=None, filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n', lower=(True), split=' ', char_level=(False), oov_token=None, document_count=0, **kwargs ) 
tf.keras.layers.MultiHeadAttention( num_heads, key_dim, value_dim=None, dropout=0.0, use_bias=(True), output_shape=None, attention_axes=None, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs ) 
tf.random.truncated_normal( shape, mean=0.0, stddev=1.0, dtype=tf.dtypes.float32, seed=None, name=None ) 
tf.experimental.tensorrt.Converter( input_saved_model_dir=None, input_saved_model_tags=None, input_saved_model_signature_key=None, conversion_params=None ) 
tf.keras.applications.xception.decode_predictions( preds, top=5 ) 
tf.io.serialize_sparse( sp_input, out_type=tf.dtypes.string, name=None ) 
tf.sparse.reduce_max( sp_input, axis=None, keepdims=None, output_is_sparse=(False), name=None ) 
tf.linalg.inv( input, adjoint=(False), name=None ) 
tf.experimental.numpy.positive( x ) 
tf.linalg.matvec( a, b, transpose_a=(False), adjoint_a=(False), a_is_sparse=(False), b_is_sparse=(False), name=None ) 
tf.math.nextafter( x1, x2, name=None ) 
tf.keras.activations.tanh( x ) 
tf.feature_column.indicator_column( categorical_column ) 
tf.image.random_saturation( image, lower, upper, seed=None ) 
tf.nn.max_pool3d( input, ksize, strides, padding, data_format='NDHWC', name=None ) 
tf.nn.conv2d_transpose( input, filters, output_shape, strides, padding='SAME', data_format='NHWC', dilations=None, name=None ) 
tf.keras.losses.binary_crossentropy( y_true, y_pred, from_logits=(False), label_smoothing=0 ) 
tf.math.sqrt( x, name=None ) 
tf.nn.fractional_avg_pool( value, pooling_ratio, pseudo_random=(False), overlapping=(False), seed=0, name=None ) 
tf.ragged.cross( inputs, name=None ) 
tf.keras.applications.vgg16.decode_predictions( preds, top=5 ) 
tf.keras.applications.ResNet50V2( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax' ) 
tf.experimental.register_filesystem_plugin( plugin_location ) 
tf.strings.unicode_split( input, input_encoding, errors='replace', replacement_char=65533, name=None ) 
tf.transpose( a, perm=None, conjugate=(False), name='transpose' ) 
tf.keras.layers.experimental.SyncBatchNormalization( axis=-1, momentum=0.99, epsilon=0.001, center=(True), scale=(True), beta_initializer='zeros', gamma_initializer='ones', moving_mean_initializer='zeros', moving_variance_initializer='ones', beta_regularizer=None, gamma_regularizer=None, beta_constraint=None, gamma_constraint=None, renorm=(False), renorm_clipping=None, renorm_momentum=0.99, trainable=(True), adjustment=None, name=None, **kwargs ) 
tf.keras.losses.MeanSquaredLogarithmicError( reduction=losses_utils.ReductionV2.AUTO, name='mean_squared_logarithmic_error' ) 
tf.keras.metrics.CategoricalAccuracy( name='categorical_accuracy', dtype=None ) 
tf.signal.overlap_and_add( signal, frame_step, name=None ) 
tf.train.ClusterSpec( cluster ) 
tf.math.real( input, name=None ) 
tf.io.decode_png( contents, channels=0, dtype=tf.dtypes.uint8, name=None ) 
tf.experimental.numpy.tanh( x ) 
tf.keras.losses.KLDivergence( reduction=losses_utils.ReductionV2.AUTO, name='kl_divergence' ) 
tf.image.stateless_random_crop( value, size, seed, name=None ) 
tf.keras.losses.SparseCategoricalCrossentropy( from_logits=(False), reduction=losses_utils.ReductionV2.AUTO, name='sparse_categorical_crossentropy' ) 
tf.data.experimental.assert_cardinality( expected_cardinality ) 
tf.math.asin( x, name=None ) 
tf.IndexedSlices( values, indices, dense_shape=None ) 
tf.experimental.numpy.asarray( a, dtype=None ) 
tf.experimental.numpy.conj( x ) 
tf.identity_n( input, name=None ) 
tf.linalg.cholesky( input, name=None ) 
tf.experimental.numpy.swapaxes( a, axis1, axis2 ) 
tf.lookup.experimental.DenseHashTable( key_dtype, value_dtype, default_value, empty_key, deleted_key, initial_num_buckets=None, name='MutableDenseHashTable', checkpoint=(True) ) 
tf.random.set_global_generator( generator ) 
tf.keras.initializers.RandomUniform( minval=-0.05, maxval=0.05, seed=None ) 
tf.clip_by_global_norm( t_list, clip_norm, use_norm=None, name=None ) 
tf.signal.fftshift( x, axes=None, name=None ) 
tf.math.cos( x, name=None ) 
tf.space_to_batch( input, block_shape, paddings, name=None ) 
tf.ragged.stack_dynamic_partitions( data, partitions, num_partitions, name=None ) 
tf.keras.losses.MSLE( y_true, y_pred ) 
tf.math.betainc( a, b, x, name=None ) 
tf.keras.metrics.Poisson( name='poisson', dtype=None ) 
tf.keras.metrics.CosineSimilarity( name='cosine_similarity', dtype=None, axis=-1 ) 
tf.keras.layers.GlobalAveragePooling1D( data_format='channels_last', **kwargs ) 
tf.image.image_gradients( image ) 
tf.keras.layers.Flatten( data_format=None, **kwargs ) 
tf.sets.size( a, validate_indices=(True) ) 
tf.estimator.FeedFnHook( feed_fn ) 
tf.keras.datasets.mnist.load_data( path='mnist.npz' ) 
tf.image.adjust_jpeg_quality( image, jpeg_quality, name=None ) 
tf.keras.metrics.SpecificityAtSensitivity( sensitivity, num_thresholds=200, name=None, dtype=None ) 
tf.keras.callbacks.CSVLogger( filename, separator=',', append=(False) ) 
tf.keras.callbacks.TerminateOnNaN() 
tf.keras.layers.experimental.RandomFourierFeatures( output_dim, kernel_initializer='gaussian', scale=None, trainable=(False), name=None, **kwargs ) 
tf.bitwise.bitwise_and( x, y, name=None ) 
tf.estimator.DNNEstimator( head, hidden_units, feature_columns, model_dir=None, optimizer='Adagrad', activation_fn=tf.nn.relu, dropout=None, config=None, warm_start_from=None, batch_norm=(False) ) 
tf.keras.preprocessing.image.random_shear( x, intensity, row_axis=1, col_axis=2, channel_axis=0, fill_mode='nearest', cval=0.0, interpolation_order=1 ) 
tf.image.non_max_suppression_overlaps( overlaps, scores, max_output_size, overlap_threshold=0.5, score_threshold=float('-inf'), name=None ) 
tf.keras.utils.get_custom_objects() 
tf.signal.fft( input, name=None ) 
tf.experimental.numpy.random.random( size=None ) 
tf.estimator.export.build_parsing_serving_input_receiver_fn( feature_spec, default_batch_size=None ) 
tf.quantize_and_dequantize_v4( input, input_min, input_max, signed_input=(True), num_bits=8, range_given=(False), round_mode='HALF_TO_EVEN', narrow_range=(False), axis=-1, name=None ) 
tf.data.experimental.rejection_resample( class_func, target_dist, initial_dist=None, seed=None ) 
tf.gather( params, indices, validate_indices=None, axis=None, batch_dims=0, name=None ) 
tf.experimental.numpy.zeros_like( a, dtype=None ) 
tf.keras.layers.MaxPool1D( pool_size=2, strides=None, padding='valid', data_format='channels_last', **kwargs ) 
tf.keras.applications.DenseNet121( include_top=(True), weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000 ) 
tf.keras.utils.get_registered_name( obj ) 
tf.estimator.ProfilerHook( save_steps=None, save_secs=None, output_dir='', show_dataflow=(True), show_memory=(False) ) 
tf.keras.metrics.LogCoshError( name='logcosh', dtype=None ) 
tf.experimental.numpy.deg2rad( x ) 
tf.nondifferentiable_batch_function( num_batch_threads, max_batch_size, batch_timeout_micros, allowed_batch_sizes=None, max_enqueued_batches=10, autograph=(True), enable_large_batch_splitting=(True) ) 
tf.no_gradient( op_type ) 
tf.experimental.numpy.sqrt( x ) 
tf.experimental.numpy.cosh( x ) 
tf.keras.activations.serialize( activation ) 
tf.keras.layers.ActivityRegularization( l1=0.0, l2=0.0, **kwargs ) 
tf.experimental.numpy.logical_not( x ) 
tf.broadcast_static_shape( shape_x, shape_y ) 
tf.nn.erosion2d( value, filters, strides, padding, data_format, dilations, name=None ) 
tf.keras.utils.to_categorical( y, num_classes=None, dtype='float32' ) 
tf.keras.preprocessing.image.random_brightness( x, brightness_range ) 
tf.quantization.quantize_and_dequantize_v2( input, input_min, input_max, signed_input=(True), num_bits=8, range_given=(False), round_mode='HALF_TO_EVEN', name=None, narrow_range=(False), axis=None ) 
tf.estimator.DNNClassifier( hidden_units, feature_columns, model_dir=None, n_classes=2, weight_column=None, label_vocabulary=None, optimizer='Adagrad', activation_fn=tf.nn.relu, dropout=None, config=None, warm_start_from=None, loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE, batch_norm=(False) ) 
tf.math.confusion_matrix( labels, predictions, num_classes=None, weights=None, dtype=tf.dtypes.int32, name=None ) 
tf.keras.metrics.SparseCategoricalAccuracy( name='sparse_categorical_accuracy', dtype=None ) 
tf.image.random_brightness( image, max_delta, seed=None ) 
tf.hessians( ys, xs, gate_gradients=(False), aggregation_method=None, name='hessians' ) 
tf.keras.layers.experimental.preprocessing.RandomCrop( height, width, seed=None, name=None, **kwargs ) 
tf.bitcast( input, type, name=None ) 
tf.math.argmin( input, axis=None, output_type=tf.dtypes.int64, name=None ) 
tf.math.logical_and( x, y, name=None ) 
tf.sets.union( a, b, validate_indices=(True) ) 
tf.nn.nce_loss( weights, biases, labels, inputs, num_sampled, num_classes, num_true=1, sampled_values=None, remove_accidental_hits=(False), name='nce_loss' ) 
tf.nn.depth_to_space( input, block_size, data_format='NHWC', name=None ) 
tf.experimental.numpy.log( x ) 
tf.experimental.numpy.divmod( x1, x2 ) 
tf.keras.applications.mobilenet_v2.decode_predictions( preds, top=5 ) 
tf.keras.applications.mobilenet_v3.preprocess_input( x, data_format=None ) 
tf.linalg.LinearOperatorLowRankUpdate( base_operator, u, diag_update=None, v=None, is_diag_update_positive=None, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorLowRankUpdate' ) 
tf.linalg.svd( tensor, full_matrices=(False), compute_uv=(True), name=None ) 
tf.strings.regex_full_match( input, pattern, name=None ) 
tf.random.stateless_uniform( shape, seed, minval=0, maxval=None, dtype=tf.dtypes.float32, name=None ) 
tf.math.erfc( x, name=None ) 
tf.linalg.qr( input, full_matrices=(False), name=None ) 
tf.tensordot( a, b, axes, name=None ) 
tf.keras.layers.SimpleRNNCell( units, activation='tanh', use_bias=(True), kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, **kwargs ) 
tf.keras.metrics.RecallAtPrecision( precision, num_thresholds=200, name=None, dtype=None ) 
tf.nn.space_to_depth( input, block_size, data_format='NHWC', name=None ) 
tf.keras.initializers.GlorotUniform( seed=None ) 
tf.keras.layers.UpSampling3D( size=(2, 2, 2), data_format=None, **kwargs ) 
tf.data.experimental.to_variant( dataset ) 
tf.math.divide_no_nan( x, y, name=None ) 
tf.math.digamma( x, name=None ) 
tf.keras.activations.sigmoid( x ) 
tf.io.encode_base64( input, pad=(False), name=None ) 
tf.quantization.quantize( input, min_range, max_range, T, mode='MIN_COMBINED', round_mode='HALF_AWAY_FROM_ZERO', name=None, narrow_range=(False), axis=None, ensure_minimum_range=0.01 ) 
tf.keras.initializers.get( identifier ) 
tf.experimental.numpy.cross( a, b, axisa=-1, axisb=-1, axisc=-1, axis=None ) 
tf.image.stateless_random_flip_up_down( image, seed ) 
tf.sparse.concat( axis, sp_inputs, expand_nonconcat_dims=(False), name=None ) 
tf.estimator.experimental.stop_if_lower_hook( estimator, metric_name, threshold, eval_dir=None, min_steps=0, run_every_secs=60, run_every_steps=None ) 
tf.keras.layers.Dropout( rate, noise_shape=None, seed=None, **kwargs ) 
tf.keras.metrics.RootMeanSquaredError( name='root_mean_squared_error', dtype=None ) 
tf.keras.layers.Activation( activation, **kwargs ) 
tf.keras.metrics.serialize( metric ) 
tf.keras.layers.Bidirectional( layer, merge_mode='concat', weights=None, backward_layer=None, **kwargs ) 
tf.experimental.numpy.flip( m, axis=None ) 
tf.math.is_nan( x, name=None ) 
tf.ensure_shape( x, shape, name=None ) 
tf.is_tensor( x ) 
tf.random.stateless_gamma( shape, seed, alpha, beta=None, dtype=tf.dtypes.float32, name=None ) 
tf.keras.losses.SquaredHinge( reduction=losses_utils.ReductionV2.AUTO, name='squared_hinge' ) 
tf.sysconfig.get_build_info() 
tf.experimental.numpy.tan( x ) 
tf.signal.irfft3d( input_tensor, fft_length=None, name=None ) 
tf.math.bessel_i1( x, name=None ) 
tf.estimator.GlobalStepWaiterHook( wait_until_step ) 
tf.data.experimental.load( path, element_spec, compression=None, reader_func=None ) 
tf.data.experimental.StatsAggregator() 
tf.feature_column.bucketized_column( source_column, boundaries ) 
tf.ragged.row_splits_to_segment_ids( splits, name=None, out_type=None ) 
tf.experimental.numpy.log2( x ) 
tf.nn.convolution( input, filters, strides=None, padding='VALID', data_format=None, dilations=None, name=None ) 
tf.image.resize_with_crop_or_pad( image, target_height, target_width ) 
tf.ragged.map_flat_values( op, *args, **kwargs ) 
tf.sparse.segment_sum( data, indices, segment_ids, num_segments=None, name=None ) 
tf.math.is_inf( x, name=None ) 
tf.keras.layers.experimental.preprocessing.IntegerLookup( max_values=None, num_oov_indices=1, mask_value=0, oov_value=-1, vocabulary=None, invert=(False), **kwargs ) 
tf.image.random_flip_up_down( image, seed=None ) 
tf.experimental.numpy.lcm( x1, x2 ) 
tf.linalg.LinearOperatorIdentity( num_rows, batch_shape=None, dtype=None, is_non_singular=(True), is_self_adjoint=(True), is_positive_definite=(True), is_square=(True), assert_proper_shapes=(False), name='LinearOperatorIdentity' ) 
tf.quantization.dequantize( input, min_range, max_range, mode='MIN_COMBINED', name=None, axis=None, narrow_range=(False), dtype=tf.dtypes.float32 ) 
tf.feature_column.sequence_categorical_column_with_vocabulary_file( key, vocabulary_file, vocabulary_size=None, num_oov_buckets=0, default_value=None, dtype=tf.dtypes.string ) 
tf.math.ndtri( x, name=None ) 
tf.math.special.bessel_y1( x, name=None ) 
tf.keras.initializers.GlorotNormal( seed=None ) 
tf.math.polygamma( a, x, name=None ) 
tf.keras.optimizers.Optimizer( name, gradient_aggregator=None, gradient_transformers=None, **kwargs ) 
tf.CriticalSection( name=None, shared_name=None, critical_section_def=None, import_scope=None ) 
tf.nn.atrous_conv2d_transpose( value, filters, output_shape, rate, padding, name=None ) 
tf.sparse.SparseTensor( indices, values, dense_shape ) 
tf.keras.metrics.MeanTensor( name='mean_tensor', dtype=None ) 
tf.experimental.numpy.iscomplex( x ) 
tf.keras.applications.inception_resnet_v2.decode_predictions( preds, top=5 ) 
tf.keras.layers.BatchNormalization( axis=-1, momentum=0.99, epsilon=0.001, center=(True), scale=(True), beta_initializer='zeros', gamma_initializer='ones', moving_mean_initializer='zeros', moving_variance_initializer='ones', beta_regularizer=None, gamma_regularizer=None, beta_constraint=None, gamma_constraint=None, renorm=(False), renorm_clipping=None, renorm_momentum=0.99, fused=None, trainable=(True), virtual_batch_size=None, adjustment=None, name=None, **kwargs ) 
tf.strings.lower( input, encoding='', name=None ) 
tf.estimator.regressor_parse_example_spec( feature_columns, label_key, label_dtype=tf.dtypes.float32, label_default=None, label_dimension=1, weight_column=None ) 
tf.linalg.eigh( tensor, name=None ) 
tf.keras.metrics.deserialize( config, custom_objects=None ) 
tf.keras.layers.RNN( cell, return_sequences=(False), return_state=(False), go_backwards=(False), stateful=(False), unroll=(False), time_major=(False), **kwargs ) 
tf.experimental.numpy.asanyarray( a, dtype=None ) 
tf.keras.initializers.serialize( initializer ) 
tf.experimental.numpy.broadcast_arrays( *args, **kwargs ) 
tf.keras.metrics.Sum( name='sum', dtype=None ) 
tf.random.Generator( copy_from=None, state=None, alg=None ) 
tf.keras.layers.SeparableConv1D( filters, kernel_size, strides=1, padding='valid', data_format=None, dilation_rate=1, depth_multiplier=1, activation=None, use_bias=(True), depthwise_initializer='glorot_uniform', pointwise_initializer='glorot_uniform', bias_initializer='zeros', depthwise_regularizer=None, pointwise_regularizer=None, bias_regularizer=None, activity_regularizer=None, depthwise_constraint=None, pointwise_constraint=None, bias_constraint=None, **kwargs ) 
tf.experimental.numpy.fabs( x ) 
tf.keras.callbacks.CallbackList( callbacks=None, add_history=(False), add_progbar=(False), model=None, **params ) 
tf.keras.layers.experimental.preprocessing.RandomWidth( factor, interpolation='bilinear', seed=None, name=None, **kwargs ) 
tf.keras.layers.RepeatVector( n, **kwargs ) 
tf.foldl( fn, elems, initializer=None, parallel_iterations=10, back_prop=(True), swap_memory=(False), name=None ) 
tf.compat.as_str( bytes_or_text, encoding='utf-8' ) 
tf.estimator.Estimator( model_fn, model_dir=None, config=None, params=None, warm_start_from=None ) 
tf.experimental.numpy.subtract( x1, x2 ) 
tf.estimator.export.build_raw_serving_input_receiver_fn( features, default_batch_size=None ) 
tf.executing_eagerly() 
tf.experimental.numpy.angle( z, deg=(False) ) 
tf.guarantee_const( input, name=None ) 
tf.compat.forward_compatible( year, month, day ) 
tf.sparse.fill_empty_rows( sp_input, default_value, name=None ) 
tf.sparse.transpose( sp_input, perm=None, name=None ) 
tf.experimental.numpy.expand_dims( a, axis ) 
tf.train.ExponentialMovingAverage( decay, num_updates=None, zero_debias=(False), name='ExponentialMovingAverage' ) 
tf.keras.layers.experimental.EinsumDense( equation, output_shape, activation=None, bias_axes=None, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs ) 
tf.linalg.LinearOperatorScaledIdentity( num_rows, multiplier, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=(True), assert_proper_shapes=(False), name='LinearOperatorScaledIdentity' ) 
tf.linalg.triangular_solve( matrix, rhs, lower=(True), adjoint=(False), name=None ) 
tf.compat.dimension_at_index( shape, index ) 
tf.keras.optimizers.serialize( optimizer ) 
tf.estimator.StopAtStepHook( num_steps=None, last_step=None ) 
tf.keras.utils.get_file( fname, origin, untar=(False), md5_hash=None, file_hash=None, cache_subdir='datasets', hash_algorithm='auto', extract=(False), archive_format='auto', cache_dir=None ) 
tf.sparse.segment_mean( data, indices, segment_ids, num_segments=None, name=None ) 
tf.random.fixed_unigram_candidate_sampler( true_classes, num_true, num_sampled, unique, range_max, vocab_file='', distortion=1.0, num_reserved_ids=0, num_shards=1, shard=0, unigrams=(), seed=None, name=None ) 
tf.keras.constraints.serialize( constraint ) 
tf.train.CheckpointManager( checkpoint, directory, max_to_keep, keep_checkpoint_every_n_hours=None, checkpoint_name='ckpt', step_counter=None, checkpoint_interval=None, init_fn=None ) 
tf.experimental.numpy.nansum( a, axis=None, dtype=None, keepdims=(False) ) 
tf.estimator.LoggingTensorHook( tensors, every_n_iter=None, every_n_secs=None, at_end=(False), formatter=None ) 
tf.experimental.numpy.cumprod( a, axis=None, dtype=None ) 
tf.random_normal_initializer( mean=0.0, stddev=0.05, seed=None ) 
tf.reshape( tensor, shape, name=None ) 
tf.linalg.banded_triangular_solve( bands, rhs, lower=(True), adjoint=(False), name=None ) 
tf.experimental.numpy.log10( x ) 
tf.experimental.numpy.signbit( x ) 
tf.experimental.numpy.full_like( a, fill_value, dtype=None, order='K', subok=(True), shape=None ) 
tf.sparse.segment_sqrt_n( data, indices, segment_ids, num_segments=None, name=None ) 
tf.keras.regularizers.L2( l2=0.01, **kwargs ) 
tf.keras.metrics.CategoricalHinge( name='categorical_hinge', dtype=None ) 
tf.experimental.numpy.amin( a, axis=None, keepdims=None ) 
tf.keras.applications.nasnet.preprocess_input( x, data_format=None ) 
tf.keras.initializers.HeUniform( seed=None ) 
tf.experimental.numpy.iscomplexobj( x ) 
tf.experimental.numpy.roll( a, shift, axis=None ) 
tf.keras.mixed_precision.experimental.LossScaleOptimizer( optimizer, loss_scale ) 
tf.experimental.numpy.matmul( x1, x2 ) 
tf.identity( input, name=None ) 
tf.experimental.numpy.square( x ) 
tf.keras.layers.ZeroPadding1D( padding=1, **kwargs ) 
tf.nn.ctc_greedy_decoder( inputs, sequence_length, merge_repeated=(True) ) 
tf.estimator.experimental.stop_if_higher_hook( estimator, metric_name, threshold, eval_dir=None, min_steps=0, run_every_secs=60, run_every_steps=None ) 
tf.keras.losses.CosineSimilarity( axis=-1, reduction=losses_utils.ReductionV2.AUTO, name='cosine_similarity' ) 
tf.experimental.async_clear_error() 
tf.experimental.numpy.reshape( a, newshape, order='C' ) 
tf.keras.initializers.RandomNormal( mean=0.0, stddev=0.05, seed=None ) 
tf.nn.max_pool_with_argmax( input, ksize, strides, padding, data_format='NHWC', output_dtype=tf.dtypes.int64, include_batch_in_index=(False), name=None ) 
tf.signal.ifftshift( x, axes=None, name=None ) 
tf.data.experimental.get_structure( dataset_or_iterator ) 
tf.experimental.numpy.issubdtype( arg1, arg2 ) 
tf.eye( num_rows, num_columns=None, batch_shape=None, dtype=tf.dtypes.float32, name=None ) 
tf.signal.irfft( input_tensor, fft_length=None, name=None ) 
tf.feature_column.categorical_column_with_vocabulary_file( key, vocabulary_file, vocabulary_size=None, dtype=tf.dtypes.string, default_value=None, num_oov_buckets=0 ) 
tf.experimental.numpy.greater_equal( x1, x2 ) 
tf.keras.losses.log_cosh( y_true, y_pred ) 
tf.keras.losses.sparse_categorical_crossentropy( y_true, y_pred, from_logits=(False), axis=-1 ) 
tf.image.grayscale_to_rgb( images, name=None ) 
tf.keras.utils.get_registered_object( name, custom_objects=None, module_objects=None ) 
tf.experimental.numpy.sinc( x ) 
tf.keras.layers.experimental.preprocessing.RandomRotation( factor, fill_mode='reflect', interpolation='bilinear', seed=None, name=None, fill_value=0.0, **kwargs ) 
tf.nn.depthwise_conv2d_backprop_filter( input, filter_sizes, out_backprop, strides, padding, data_format='NHWC', dilations=[1, 1, 1, 1], name=None ) 
tf.data.experimental.choose_from_datasets( datasets, choice_dataset ) 
tf.keras.layers.ZeroPadding3D( padding=(1, 1, 1), data_format=None, **kwargs ) 
tf.keras.layers.Conv1DTranspose( filters, kernel_size, strides=1, padding='valid', output_padding=None, data_format=None, dilation_rate=1, activation=None, use_bias=(True), kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs ) 
tf.sparse.bincount( values, weights=None, axis=0, minlength=None, maxlength=None, binary_output=(False), name=None ) 
tf.keras.backend.reset_uids() 
tf.keras.layers.experimental.preprocessing.Rescaling( scale, offset=0.0, name=None, **kwargs ) 
tf.data.experimental.service.WorkerServer( config, start=(True) ) 
tf.keras.metrics.MeanAbsoluteError( name='mean_absolute_error', dtype=None ) 
tf.math.round( x, name=None ) 
tf.keras.experimental.SequenceFeatures( feature_columns, trainable=(True), name=None, **kwargs ) 
tf.clip_by_norm( t, clip_norm, axes=None, name=None ) 
tf.estimator.MultiClassHead( n_classes, weight_column=None, label_vocabulary=None, loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE, loss_fn=None, name=None ) 
tf.keras.experimental.WideDeepModel( linear_model, dnn_model, activation=None, **kwargs ) 
tf.concat( values, axis, name='concat' ) 
tf.keras.preprocessing.text.hashing_trick( text, n, hash_function=None, filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n', lower=(True), split=' ' ) 
tf.math.log( x, name=None ) 
tf.io.is_jpeg( contents, name=None ) 
tf.math.unsorted_segment_sum( data, segment_ids, num_segments, name=None ) 
tf.keras.initializers.ones()
tf.math.bessel_i0( x, name=None ) 
tf.compat.as_str_any( value ) 
tf.keras.layers.LocallyConnected2D( filters, kernel_size, strides=(1, 1), padding='valid', data_format=None, activation=None, use_bias=(True), kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, implementation=1, **kwargs ) 
tf.keras.preprocessing.text.one_hot( input_text, n, filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n', lower=(True), split=' ' ) 
tf.experimental.dlpack.to_dlpack( tf_tensor ) 
tf.keras.models.model_from_config( config, custom_objects=None ) 
tf.keras.metrics.MeanRelativeError( normalizer, name=None, dtype=None ) 
tf.experimental.numpy.bitwise_and( x1, x2 ) 
tf.math.exp( x, name=None ) 
tf.keras.initializers.VarianceScaling( scale=1.0, mode='fan_in', distribution='truncated_normal', seed=None ) 
tf.random.log_uniform_candidate_sampler( true_classes, num_true, num_sampled, unique, range_max, seed=None, name=None ) 
tf.keras.utils.model_to_dot( model, show_shapes=(False), show_dtype=(False), show_layer_names=(True), rankdir='TB', expand_nested=(False), dpi=96, subgraph=(False) ) 
tf.experimental.numpy.std( a, axis=None, keepdims=None ) 
tf.io.encode_proto( sizes, values, field_names, message_type, descriptor_source='local://', name=None ) 
tf.mixed_precision.experimental.FixedLossScale( loss_scale_value ) 
tf.realdiv( x, y, name=None ) 
tf.data.experimental.take_while( predicate ) 
tf.function( func=None, input_signature=None, autograph=(True), experimental_implements=None, experimental_autograph_options=None, experimental_relax_shapes=(False), experimental_compile=None, experimental_follow_type_hints=None ) 
tf.experimental.numpy.zeros( shape, dtype=float ) 
tf.estimator.DNNRegressor( hidden_units, feature_columns, model_dir=None, label_dimension=1, weight_column=None, optimizer='Adagrad', activation_fn=tf.nn.relu, dropout=None, config=None, warm_start_from=None, loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE, batch_norm=(False) ) 
tf.keras.layers.experimental.preprocessing.RandomFlip( mode=HORIZONTAL_AND_VERTICAL, seed=None, name=None, **kwargs ) 
tf.train.get_checkpoint_state( checkpoint_dir, latest_filename=None ) 
tf.random.create_rng_state( seed, alg ) 
tf.keras.utils.deserialize_keras_object( identifier, module_objects=None, custom_objects=None, printable_module_name='object' ) 
tf.cast( x, dtype, name=None ) 
tf.experimental.numpy.argmin( a, axis=None ) 
tf.keras.datasets.imdb.load_data( path='imdb.npz', num_words=None, skip_top=0, maxlen=None, seed=113, start_char=1, oov_char=2, index_from=3, **kwargs ) 
tf.experimental.numpy.concatenate( arys, axis=0 ) 
tf.keras.utils.normalize( x, axis=-1, order=2 ) 
tf.keras.utils.GeneratorEnqueuer( sequence, use_multiprocessing=(False), random_seed=None ) 
tf.math.segment_max( data, segment_ids, name=None ) 
tf.keras.layers.Cropping2D( cropping=((0, 0), (0, 0)), data_format=None, **kwargs ) 
tf.nn.batch_normalization( x, mean, variance, offset, scale, variance_epsilon, name=None ) 
tf.nn.compute_accidental_hits( true_classes, sampled_candidates, num_true, seed=None, name=None ) 
tf.experimental.numpy.count_nonzero( a, axis=None ) 
tf.keras.layers.Attention( use_scale=(False), **kwargs ) 
tf.keras.layers.LSTM( units, activation='tanh', recurrent_activation='sigmoid', use_bias=(True), kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', unit_forget_bias=(True), kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, return_sequences=(False), return_state=(False), go_backwards=(False), stateful=(False), time_major=(False), unroll=(False), **kwargs ) 
tf.io.extract_jpeg_shape( contents, output_type=tf.dtypes.int32, name=None ) 
tf.estimator.FinalOpsHook( final_ops, final_ops_feed_dict=None ) 
tf.experimental.numpy.shape( a ) 
tf.math.cumsum( x, axis=0, exclusive=(False), reverse=(False), name=None ) 
tf.linalg.LinearOperatorInversion( operator, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name=None ) 
tf.keras.utils.register_keras_serializable( package='Custom', name=None ) 
tf.linalg.adjoint( matrix, name=None ) 
tf.keras.models.clone_model( model, input_tensors=None, clone_function=None ) 
tf.image.convert_image_dtype( image, dtype, saturate=(False), name=None ) 
tf.image.stateless_random_contrast( image, lower, upper, seed ) 
tf.math.count_nonzero( input, axis=None, keepdims=None, dtype=tf.dtypes.int64, name=None ) 
tf.register_tensor_conversion_function( base_type, conversion_func, priority=100 ) 
tf.keras.layers.AveragePooling1D( pool_size=2, strides=None, padding='valid', data_format='channels_last', **kwargs ) 
tf.experimental.numpy.fix( x ) 
tf.experimental.numpy.conjugate( x ) 
tf.keras.losses.KLD( y_true, y_pred ) 
tf.nn.scale_regularization_loss( regularization_loss ) 
tf.keras.regularizers.serialize( regularizer ) 
tf.quantization.quantized_concat( concat_dim, values, input_mins, input_maxes, name=None ) 
tf.signal.idct( input, type=2, n=None, axis=-1, norm=None, name=None ) 
tf.io.decode_compressed( bytes, compression_type='', name=None ) 
tf.experimental.numpy.add( x1, x2 ) 
tf.math.unsorted_segment_mean( data, segment_ids, num_segments, name=None ) 
tf.keras.mixed_precision.experimental.get_layer_policy( layer ) 
tf.random.learned_unigram_candidate_sampler( true_classes, num_true, num_sampled, unique, range_max, seed=None, name=None ) 
tf.linalg.experimental.conjugate_gradient( operator, rhs, preconditioner=None, x=None, tol=1e-05, max_iter=20, name='conjugate_gradient' ) 
tf.random.stateless_parameterized_truncated_normal( shape, seed, means=0.0, stddevs=1.0, minvals=-2.0, maxvals=2.0, name=None ) 
tf.math.zero_fraction( value, name=None ) 
tf.random.normal( shape, mean=0.0, stddev=1.0, dtype=tf.dtypes.float32, seed=None, name=None ) 
tf.keras.layers.AlphaDropout( rate, noise_shape=None, seed=None, **kwargs ) 
tf.math.ceil( x, name=None ) 
tf.data.experimental.make_batched_features_dataset( file_pattern, batch_size, features, reader=None, label_key=None, reader_args=None, num_epochs=None, shuffle=(True), shuffle_buffer_size=10000, shuffle_seed=None, prefetch_buffer_size=None, reader_num_threads=None, parser_num_threads=None, sloppy_ordering=(False), drop_final_batch=(False) ) 
tf.nn.batch_norm_with_global_normalization( input, mean, variance, beta, gamma, variance_epsilon, scale_after_normalization, name=None ) 
tf.keras.activations.selu( x ) 
tf.nn.moments( x, axes, shift=None, keepdims=(False), name=None ) 
tf.image.random_flip_left_right( image, seed=None ) 
tf.strided_slice( input_, begin, end, strides=None, begin_mask=0, end_mask=0, ellipsis_mask=0, new_axis_mask=0, shrink_axis_mask=0, var=None, name=None ) 
tf.keras.losses.cosine_similarity( y_true, y_pred, axis=-1 ) 
tf.random.shuffle( value, seed=None, name=None ) 
tf.nn.dropout( x, rate, noise_shape=None, seed=None, name=None ) 
tf.nn.l2_loss( t, name=None ) 
