torch.nn.functional.conv1d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1)
torch.nn.functional.conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1)
torch.nn.functional.conv3d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1)
torch.nn.functional.conv_transpose1d(input, weight, bias=None, stride=1, padding=0, output_padding=0, groups=1, dilation=1)
torch.nn.functional.conv_transpose2d(input, weight, bias=None, stride=1, padding=0, output_padding=0, groups=1, dilation=1)
torch.nn.functional.conv_transpose3d(input, weight, bias=None, stride=1, padding=0, output_padding=0, groups=1, dilation=1)
torch.nn.functional.unfold(input, kernel_size, dilation=1, padding=0, stride=1)
torch.nn.functional.fold(input, output_size, kernel_size, dilation=1, padding=0, stride=1)
torch.nn.functional.avg_pool1d(input, kernel_size, stride=None, padding=0, ceil_mode=False, count_include_pad=True)
torch.nn.functional.avg_pool2d(input, kernel_size, stride=None, padding=0, ceil_mode=False, count_include_pad=True, divisor_override=None)
torch.nn.functional.avg_pool3d(input, kernel_size, stride=None, padding=0, ceil_mode=False, count_include_pad=True, divisor_override=None)
torch.nn.functional.max_pool1d(*args, **kwargs)
torch.nn.functional.max_pool2d(*args, **kwargs)
torch.nn.functional.max_pool3d(*args, **kwargs)
torch.nn.functional.max_unpool1d(input, indices, kernel_size, stride=None, padding=0, output_size=None)
torch.nn.functional.max_unpool2d(input, indices, kernel_size, stride=None, padding=0, output_size=None)
torch.nn.functional.max_unpool3d(input, indices, kernel_size, stride=None, padding=0, output_size=None)
torch.nn.functional.lp_pool1d(input, norm_type, kernel_size, stride=None, ceil_mode=False)
torch.nn.functional.lp_pool2d(input, norm_type, kernel_size, stride=None, ceil_mode=False)
torch.nn.functional.adaptive_max_pool1d(*args, **kwargs)
torch.nn.functional.adaptive_max_pool2d(*args, **kwargs)
torch.nn.functional.adaptive_max_pool3d(*args, **kwargs)
torch.nn.functional.adaptive_avg_pool1d(input, output_size)
torch.nn.functional.adaptive_avg_pool2d(input, output_size)
torch.nn.functional.adaptive_avg_pool3d(input, output_size)
torch.nn.functional.threshold(input, threshold, value, inplace=False)
torch.nn.functional.threshold_(input, threshold, value)
torch.nn.functional.relu(input, inplace=False)
torch.nn.functional.relu_(input)
torch.nn.functional.hardtanh(input, min_val=-1., max_val=1., inplace=False)
torch.nn.functional.hardtanh_(input, min_val=-1., max_val=1.)
torch.nn.functional.hardswish(input, inplace=False)
torch.nn.functional.relu6(input, inplace=False)
torch.nn.functional.elu(input, alpha=1.0, inplace=False)
torch.nn.functional.elu_(input, alpha=1.)
torch.nn.functional.selu(input, inplace=False)
torch.nn.functional.celu(input, alpha=1., inplace=False)
torch.nn.functional.leaky_relu(input, negative_slope=0.01, inplace=False)
torch.nn.functional.leaky_relu_(input, negative_slope=0.01)
torch.nn.functional.prelu(input, weight)
torch.nn.functional.rrelu(input, lower=1./8, upper=1./3, training=False, inplace=False)
torch.nn.functional.rrelu_(input, lower=1./8, upper=1./3, training=False)
torch.nn.functional.glu(input, dim=-1)
torch.nn.functional.gelu(input)
torch.nn.functional.logsigmoid(input)
torch.nn.functional.hardshrink(input, lambd=0.5)
torch.nn.functional.tanhshrink(input)
torch.nn.functional.softsign(input)
torch.nn.functional.softplus(input, beta=1, threshold=20)
torch.nn.functional.softmin(input, dim=None, _stacklevel=3, dtype=None)
torch.nn.functional.softmax(input, dim=None, _stacklevel=3, dtype=None)
torch.nn.functional.softshrink(input, lambd=0.5)
torch.nn.functional.gumbel_softmax(logits, tau=1, hard=False, eps=1e-10, dim=-1)
torch.nn.functional.log_softmax(input, dim=None, _stacklevel=3, dtype=None)
torch.nn.functional.tanh(input)
torch.nn.functional.sigmoid(input)
torch.nn.functional.hardsigmoid(input, inplace=False)
torch.nn.functional.silu(input, inplace=False)
torch.nn.functional.batch_norm(input, running_mean, running_var, weight=None, bias=None, training=False, momentum=0.1, eps=1e-05)
torch.nn.functional.instance_norm(input, running_mean=None, running_var=None, weight=None, bias=None, use_input_stats=True, momentum=0.1, eps=1e-05)
torch.nn.functional.layer_norm(input, normalized_shape, weight=None, bias=None, eps=1e-05)
torch.nn.functional.local_response_norm(input, size, alpha=0.0001, beta=0.75, k=1.0)
torch.nn.functional.normalize(input, p=2.0, dim=1, eps=1e-12, out=None)
torch.nn.functional.linear(input, weight, bias=None)
torch.nn.functional.bilinear(input1, input2, weight, bias=None)
torch.nn.functional.dropout(input, p=0.5, training=True, inplace=False)
torch.nn.functional.alpha_dropout(input, p=0.5, training=False, inplace=False)
torch.nn.functional.feature_alpha_dropout(input, p=0.5, training=False, inplace=False)
torch.nn.functional.dropout2d(input, p=0.5, training=True, inplace=False)
torch.nn.functional.dropout3d(input, p=0.5, training=True, inplace=False)
torch.nn.functional.embedding(input, weight, padding_idx=None, max_norm=None, norm_type=2.0, scale_grad_by_freq=False, sparse=False)
torch.nn.functional.embedding_bag(input, weight, offsets=None, max_norm=None, norm_type=2, scale_grad_by_freq=False, mode='mean', sparse=False, per_sample_weights=None, include_last_offset=False, padding_idx=None)
torch.nn.functional.one_hot(tensor, num_classes=-1)
torch.nn.functional.pairwise_distance(x1, x2, p=2.0, eps=1e-06, keepdim=False)
torch.nn.functional.cosine_similarity(x1, x2, dim=1, eps=1e-8)
torch.nn.functional.pdist(input, p=2)
torch.nn.functional.binary_cross_entropy(input, target, weight=None, size_average=None, reduce=None, reduction='mean')
torch.nn.functional.binary_cross_entropy_with_logits(input, target, weight=None, size_average=None, reduce=None, reduction='mean', pos_weight=None)
torch.nn.functional.poisson_nll_loss(input, target, log_input=True, full=False, size_average=None, eps=1e-08, reduce=None, reduction='mean')
torch.nn.functional.cosine_embedding_loss(input1, input2, target, margin=0, size_average=None, reduce=None, reduction='mean')
torch.nn.functional.cross_entropy(input, target, weight=None, size_average=None, ignore_index=-100, reduce=None, reduction='mean')
torch.nn.functional.ctc_loss(log_probs, targets, input_lengths, target_lengths, blank=0, reduction='mean', zero_infinity=False)
torch.nn.functional.hinge_embedding_loss(input, target, margin=1.0, size_average=None, reduce=None, reduction='mean')
torch.nn.functional.kl_div(input, target, size_average=None, reduce=None, reduction='mean', log_target=False)
torch.nn.functional.l1_loss(input, target, size_average=None, reduce=None, reduction='mean')
torch.nn.functional.mse_loss(input, target, size_average=None, reduce=None, reduction='mean')
torch.nn.functional.margin_ranking_loss(input1, input2, target, margin=0, size_average=None, reduce=None, reduction='mean')
torch.nn.functional.multilabel_margin_loss(input, target, size_average=None, reduce=None, reduction='mean')
torch.nn.functional.multilabel_soft_margin_loss(input, target, weight=None, size_average=None)
torch.nn.functional.multi_margin_loss(input, target, p=1, margin=1.0, weight=None, size_average=None, reduce=None, reduction='mean')
torch.nn.functional.nll_loss(input, target, weight=None, size_average=None, ignore_index=-100, reduce=None, reduction='mean')
torch.nn.functional.smooth_l1_loss(input, target, size_average=None, reduce=None, reduction='mean', beta=1.0)
torch.nn.functional.soft_margin_loss(input, target, size_average=None, reduce=None, reduction='mean')
torch.nn.functional.triplet_margin_loss(anchor, positive, negative, margin=1.0, p=2, eps=1e-06, swap=False, size_average=None, reduce=None, reduction='mean')
torch.nn.functional.triplet_margin_with_distance_loss(anchor, positive, negative, *, distance_function=None, margin=1.0, swap=False, reduction='mean')
torch.nn.functional.pixel_shuffle(input, upscale_factor)
torch.nn.functional.pixel_unshuffle(input, downscale_factor)
torch.nn.functional.pad(input, pad, mode='constant', value=0)
torch.nn.functional.interpolate(input, size=None, scale_factor=None, mode='nearest', align_corners=None, recompute_scale_factor=None)
torch.nn.functional.upsample(input, size=None, scale_factor=None, mode='nearest', align_corners=None)
torch.nn.functional.upsample_nearest(input, size=None, scale_factor=None)
torch.nn.functional.upsample_bilinear(input, size=None, scale_factor=None)
torch.nn.functional.grid_sample(input, grid, mode='bilinear', padding_mode='zeros', align_corners=None)
torch.nn.functional.affine_grid(theta, size, align_corners=None)
torch.is_tensor(obj)
torch.is_storage(obj)
torch.is_complex(input)
torch.is_floating_point(input)
torch.is_nonzero(input)
torch.set_default_dtype(d)
torch.get_default_dtype()
torch.set_default_tensor_type(t)
torch.numel(input)
torch.set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, profile=None, sci_mode=None)
torch.set_flush_denormal(mode)
torch.rand(*size, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False)
torch.rand_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format)
torch.randn(*size, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False)
torch.randn_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format)
torch.randint(low=0, high, size, *, generator=None, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False)
torch.randint_like(input, low=0, high, *, dtype=None, layout=torch.strided, device=None, requires_grad=False, memory_format=torch.preserve_format)
torch.randperm(n, *, generator=None, out=None, dtype=torch.int64, layout=torch.strided, device=None, requires_grad=False, pin_memory=False)
torch.empty(*size, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False, pin_memory=False, memory_format=torch.contiguous_format)
torch.tensor(data, *, dtype=None, device=None, requires_grad=False, pin_memory=False)
torch.sparse_coo_tensor(indices, values, size=None, *, dtype=None, device=None, requires_grad=False)
torch.as_tensor(data, dtype=None, device=None)
torch.as_strided(input, size, stride, storage_offset=0)
torch.from_numpy(ndarray)
torch.zeros(*size, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False)
torch.zeros_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format)
torch.ones(*size, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False)
torch.ones_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format)
torch.arange(start=0, end, step=1, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False)
torch.range(start=0, end, step=1, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False)
torch.linspace(start, end, steps, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False)
torch.logspace(start, end, steps, base=10.0, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False)
torch.eye(n, m=None, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False)
torch.empty_like(input, *, dtype=None, layout=None, device=None, requires_grad=False, memory_format=torch.preserve_format)
torch.empty_strided(size, stride, *, dtype=None, layout=None, device=None, requires_grad=False, pin_memory=False)
torch.full(size, fill_value, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False)
torch.full_like(input, fill_value, *, dtype=None, layout=torch.strided, device=None, requires_grad=False, memory_format=torch.preserve_format)
torch.quantize_per_tensor(input, scale, zero_point, dtype)
torch.quantize_per_channel(input, scales, zero_points, axis, dtype)
torch.dequantize(tensor)
torch.dequantize(tensors)
torch.complex(real, imag, *, out=None)
torch.imag(input)
torch.polar(abs, angle, *, out=None)
torch.angle(input, *, out=None)
torch.heaviside(input, values, *, out=None)
torch.cat(tensors, dim=0, *, out=None)
torch.chunk(input, chunks, dim=0)
torch.column_stack(tensors, *, out=None)
torch.dstack(tensors, *, out=None)
torch.gather(input, dim, index, *, sparse_grad=False, out=None)
torch.hstack(tensors, *, out=None)
torch.index_select(input, dim, index, *, out=None)
torch.masked_select(input, mask, *, out=None)
torch.movedim(input, source, destination)
torch.moveaxis(input, source, destination)
torch.narrow(input, dim, start, length)
torch.nonzero(input, *, out=None, as_tuple=False)
torch.reshape(input, shape)
torch.row_stack(tensors, *, out=None)
torch.vstack(tensors, *, out=None)
torch.scatter(input, dim, index, src)
torch.scatter_add(input, dim, index, src)
torch.split(tensor, split_size_or_sections, dim=0)
torch.squeeze(input, dim=None, *, out=None)
torch.stack(tensors, dim=0, *, out=None)
torch.swapaxes(input, axis0, axis1)
torch.transpose(input, dim0, dim1)
torch.swapdims(input, dim0, dim1)
torch.t(input)
torch.take(input, index)
torch.tensor_split(input, indices_or_sections, dim=0)
torch.tile(input, reps)
torch.unbind(input, dim=0)
torch.unsqueeze(input, dim)
torch.where(condition, x, y)
torch.where(condition)
torch.Generator(device='cpu')
torch.seed()
torch.manual_seed(seed)
torch.initial_seed()
torch.get_rng_state()
torch.set_rng_state(new_state)
torch.bernoulli(input, *, generator=None, out=None)
torch.multinomial(input, num_samples, replacement=False, *, generator=None, out=None)
torch.normal(mean, std, *, generator=None, out=None)
torch.normal(mean=0.0, std, *, out=None)
torch.normal(mean, std=1.0, *, out=None)
torch.normal(mean, std, size, *, out=None)
torch.poisson(input, generator=None)
torch.quasirandom.SobolEngine(dimension, scramble=False, seed=None)
torch.save(obj, f, pickle_module=pickle, pickle_protocol=DEFAULT_PROTOCOL, _use_new_zipfile_serialization=True)
torch.load(f, map_location=None, pickle_module=pickle, **pickle_load_args)
torch.get_num_threads()
torch.set_num_threads(int)
torch.get_num_interop_threads()
torch.set_num_interop_threads(int)
torch.set_grad_enabled(mode)
torch.abs(input, *, out=None)
torch.absolute(input, *, out=None)
torch.acos(input, *, out=None)
torch.arccos(input, *, out=None)
torch.acosh(input, *, out=None)
torch.arccosh(input, *, out=None)
torch.add(input, other, *, out=None)
torch.add(input, other, *, alpha=1, out=None)
torch.addcdiv(input, tensor1, tensor2, *, value=1, out=None)
torch.addcmul(input, tensor1, tensor2, *, value=1, out=None)
torch.asin(input, *, out=None)
torch.arcsin(input, *, out=None)
torch.asinh(input, *, out=None)
torch.arcsinh(input, *, out=None)
torch.atan(input, *, out=None)
torch.arctan(input, *, out=None)
torch.atanh(input, *, out=None)
torch.arctanh(input, *, out=None)
torch.atan2(input, other, *, out=None)
torch.bitwise_not(input, *, out=None)
torch.bitwise_and(input, other, *, out=None)
torch.bitwise_or(input, other, *, out=None)
torch.bitwise_xor(input, other, *, out=None)
torch.ceil(input, *, out=None)
torch.clamp(input, min=None, max=None, *, out=None)
torch.max(input)
torch.max(input, dim, keepdim=False, *, out=None)
torch.max(input, other, *, out=None)
torch.clip(input, min=None, max=None, *, out=None)
torch.conj(input, *, out=None)
torch.copysign(input, other, *, out=None)
torch.cos(input, *, out=None)
torch.cosh(input, *, out=None)
torch.deg2rad(input, *, out=None)
torch.div(input, other, *, rounding_mode=None, out=None)
torch.divide(input, other, *, rounding_mode=None, out=None)
torch.digamma(input, *, out=None)
torch.erf(input, *, out=None)
torch.erfc(input, *, out=None)
torch.erfinv(input, *, out=None)
torch.exp(input, *, out=None)
torch.exp2(input, *, out=None)
torch.expm1(input, *, out=None)
torch.fake_quantize_per_channel_affine(input, scale, zero_point, quant_min, quant_max)
torch.fake_quantize_per_tensor_affine(input, scale, zero_point, quant_min, quant_max)
torch.fix(input, *, out=None)
torch.trunc(input, *, out=None)
torch.float_power(input, exponent, *, out=None)
torch.floor(input, *, out=None)
torch.floor_divide(input, other, *, out=None)
torch.fmod(input, other, *, out=None)
torch.frac(input, *, out=None)
torch.ldexp(input, other, *, out=None)
torch.lerp(input, end, weight, *, out=None)
torch.lgamma(input, *, out=None)
torch.log(input, *, out=None)
torch.log10(input, *, out=None)
torch.log1p(input, *, out=None)
torch.log2(input, *, out=None)
torch.logaddexp(input, other, *, out=None)
torch.logaddexp2(input, other, *, out=None)
torch.logical_and(input, other, *, out=None)
torch.logical_not(input, *, out=None)
torch.logical_or(input, other, *, out=None)
torch.logical_xor(input, other, *, out=None)
torch.logit(input, eps=None, *, out=None)
torch.hypot(input, other, *, out=None)
torch.i0(input, *, out=None)
torch.igamma(input, other, *, out=None)
torch.igammac(input, other, *, out=None)
torch.mul(input, other, *, out=None)
torch.mul(input, other, *, out=None)
torch.multiply(input, other, *, out=None)
torch.mvlgamma(input, p)
torch.nan_to_num(input, nan=0.0, posinf=None, neginf=None, *, out=None)
torch.neg(input, *, out=None)
torch.negative(input, *, out=None)
torch.nextafter(input, other, *, out=None)
torch.polygamma(n, input, *, out=None)
torch.pow(input, exponent, *, out=None)
torch.pow(self, exponent, *, out=None)
torch.rad2deg(input, *, out=None)
torch.real(input)
torch.reciprocal(input, *, out=None)
torch.remainder(input, other, *, out=None)
torch.round(input, *, out=None)
torch.rsqrt(input, *, out=None)
torch.sigmoid(input, *, out=None)
torch.sign(input, *, out=None)
torch.sgn(input, *, out=None)
torch.signbit(input, *, out=None)
torch.sin(input, *, out=None)
torch.sinc(input, *, out=None)
torch.sinh(input, *, out=None)
torch.sqrt(input, *, out=None)
torch.square(input, *, out=None)
torch.sub(input, other, *, alpha=1, out=None)
torch.subtract(input, other, *, alpha=1, out=None)
torch.tan(input, *, out=None)
torch.tanh(input, *, out=None)
torch.true_divide(dividend, divisor, *, out)
torch.xlogy(input, other, *, out=None)
torch.argmax(input)
torch.argmax(input, dim, keepdim=False)
torch.argmin(input, dim=None, keepdim=False)
torch.amax(input, dim, keepdim=False, *, out=None)
torch.amin(input, dim, keepdim=False, *, out=None)
torch.all(input)
torch.all(input, dim, keepdim=False, *, out=None)
torch.any(input)
torch.any(input, dim, keepdim=False, *, out=None)
torch.min(input)
torch.min(input, dim, keepdim=False, *, out=None)
torch.min(input, other, *, out=None)
torch.dist(input, other, p=2)
torch.logsumexp(input, dim, keepdim=False, *, out=None)
torch.mean(input)
torch.mean(input, dim, keepdim=False, *, out=None)
torch.median(input)
torch.median(input, dim=-1, keepdim=False, *, out=None)
torch.nanmedian(input)
torch.nanmedian(input, dim=-1, keepdim=False, *, out=None)
torch.mode(input, dim=-1, keepdim=False, *, out=None)
torch.norm(input, p='fro', dim=None, keepdim=False, out=None, dtype=None)
torch.nansum(input, *, dtype=None)
torch.nansum(input, dim, keepdim=False, *, dtype=None)
torch.prod(input, *, dtype=None)
torch.prod(input, dim, keepdim=False, *, dtype=None)
torch.quantile(input, q, dim=None, keepdim=False, *, out=None)
torch.nanquantile(input, q, dim=None, keepdim=False, *, out=None)
torch.std(input, dim, unbiased, keepdim=False, *, out=None)
torch.std(input, unbiased)
torch.std_mean(input, dim, unbiased, keepdim=False, *, out=None)
torch.std_mean(input, unbiased)
torch.sum(input, *, dtype=None)
torch.sum(input, dim, keepdim=False, *, dtype=None)
torch.unique(*args, **kwargs)
torch.unique_consecutive(*args, **kwargs)
torch.var(input, dim, unbiased, keepdim=False, *, out=None)
torch.var(input, unbiased)
torch.var_mean(input, dim, unbiased, keepdim=False, *, out=None)
torch.var_mean(input, unbiased)
torch.count_nonzero(input, dim=None)
torch.allclose(input, other, rtol=1e-05, atol=1e-08, equal_nan=False)
torch.argsort(input, dim=-1, descending=False)
torch.eq(input, other, *, out=None)
torch.equal(input, other)
torch.ge(input, other, *, out=None)
torch.greater_equal(input, other, *, out=None)
torch.gt(input, other, *, out=None)
torch.greater(input, other, *, out=None)
torch.isclose(input, other, rtol=1e-05, atol=1e-08, equal_nan=False)
torch.isfinite(input)
torch.isinf(input)
torch.isposinf(input, *, out=None)
torch.isneginf(input, *, out=None)
torch.isnan(input)
torch.isreal(input)
torch.kthvalue(input, k, dim=None, keepdim=False, *, out=None)
torch.le(input, other, *, out=None)
torch.less_equal(input, other, *, out=None)
torch.lt(input, other, *, out=None)
torch.less(input, other, *, out=None)
torch.maximum(input, other, *, out=None)
torch.minimum(input, other, *, out=None)
torch.fmax(input, other, *, out=None)
torch.fmin(input, other, *, out=None)
torch.ne(input, other, *, out=None)
torch.not_equal(input, other, *, out=None)
torch.sort(input, dim=-1, descending=False, stable=False, *, out=None)
torch.topk(input, k, dim=None, largest=True, sorted=True, *, out=None)
torch.msort(input, *, out=None)
torch.stft(input, n_fft, hop_length=None, win_length=None, window=None, center=True, pad_mode='reflect', normalized=False, onesided=None, return_complex=None)
torch.istft(input, n_fft, hop_length=None, win_length=None, window=None, center=True, normalized=False, onesided=None, length=None, return_complex=False)
torch.bartlett_window(window_length, periodic=True, *, dtype=None, layout=torch.strided, device=None, requires_grad=False)
torch.blackman_window(window_length, periodic=True, *, dtype=None, layout=torch.strided, device=None, requires_grad=False)
torch.hamming_window(window_length, periodic=True, alpha=0.54, beta=0.46, *, dtype=None, layout=torch.strided, device=None, requires_grad=False)
torch.hann_window(window_length, periodic=True, *, dtype=None, layout=torch.strided, device=None, requires_grad=False)
torch.kaiser_window(window_length, periodic=True, beta=12.0, *, dtype=None, layout=torch.strided, device=None, requires_grad=False)
torch.atleast_1d(*tensors)
torch.atleast_2d(*tensors)
torch.atleast_3d(*tensors)
torch.bincount(input, weights=None, minlength=0)
torch.block_diag(*tensors)
torch.broadcast_tensors(*tensors)
torch.broadcast_to(input, shape)
torch.broadcast_shapes(*shapes)
torch.bucketize(input, boundaries, *, out_int32=False, right=False, out=None)
torch.cartesian_prod(*tensors)
torch.cdist(x1, x2, p=2.0, compute_mode='use_mm_for_euclid_dist_if_necessary')
torch.clone(input, *, memory_format=torch.preserve_format)
torch.combinations(input, r=2, with_replacement=False)
torch.cross(input, other, dim=None, *, out=None)
torch.cummax(input, dim, *, out=None)
torch.cummin(input, dim, *, out=None)
torch.cumprod(input, dim, *, dtype=None, out=None)
torch.cumsum(input, dim, *, dtype=None, out=None)
torch.diag(input, diagonal=0, *, out=None)
torch.diag_embed(input, offset=0, dim1=-2, dim2=-1)
torch.diagflat(input, offset=0)
torch.diagonal(input, offset=0, dim1=0, dim2=1)
torch.diff(input, n=1, dim=-1, prepend=None, append=None)
torch.einsum(equation, *operands)
torch.flatten(input, start_dim=0, end_dim=-1)
torch.flip(input, dims)
torch.fliplr(input)
torch.flipud(input)
torch.kron(input, other, *, out=None)
torch.rot90(input, k, dims)
torch.gcd(input, other, *, out=None)
torch.histc(input, bins=100, min=0, max=0, *, out=None)
torch.meshgrid(*tensors)
torch.lcm(input, other, *, out=None)
torch.logcumsumexp(input, dim, *, out=None)
torch.ravel(input)
torch.renorm(input, p, dim, maxnorm, *, out=None)
torch.repeat_interleave(input, repeats, dim=None)
torch.repeat_interleave(repeats)
torch.roll(input, shifts, dims=None)
torch.searchsorted(sorted_sequence, values, *, out_int32=False, right=False, out=None)
torch.tensordot(a, b, dims=2, out=None)
torch.trace(input)
torch.tril(input, diagonal=0, *, out=None)
torch.tril_indices(row, col, offset=0, *, dtype=torch.long, device='cpu', layout=torch.strided)
torch.triu(input, diagonal=0, *, out=None)
torch.triu_indices(row, col, offset=0, *, dtype=torch.long, device='cpu', layout=torch.strided)
torch.vander(x, N=None, increasing=False)
torch.view_as_real(input)
torch.view_as_complex(input)
torch.addbmm(input, batch1, batch2, *, beta=1, alpha=1, out=None)
torch.addmm(input, mat1, mat2, *, beta=1, alpha=1, out=None)
torch.addmv(input, mat, vec, *, beta=1, alpha=1, out=None)
torch.addr(input, vec1, vec2, *, beta=1, alpha=1, out=None)
torch.baddbmm(input, batch1, batch2, *, beta=1, alpha=1, out=None)
torch.bmm(input, mat2, *, deterministic=False, out=None)
torch.chain_matmul(*matrices, out=None)
torch.cholesky(input, upper=False, *, out=None)
torch.cholesky_inverse(input, upper=False, *, out=None)
torch.cholesky_solve(input, input2, upper=False, *, out=None)
torch.dot(input, other, *, out=None)
torch.eig(input, eigenvectors=False, *, out=None)
torch.geqrf(input, *, out=None)
torch.ger(input, vec2, *, out=None)
torch.outer(input, vec2, *, out=None)
torch.inner(input, other, *, out=None)
torch.inverse(input, *, out=None)
torch.det(input)
torch.logdet(input)
torch.slogdet(input)
torch.lstsq(input, A, *, out=None)
torch.lu(*args, **kwargs)
torch.lu_solve(b, LU_data, LU_pivots, *, out=None)
torch.lu_unpack(LU_data, LU_pivots, unpack_data=True, unpack_pivots=True, *, out=None)
torch.matmul(input, other, *, out=None)
torch.matrix_power(input, n, *, out=None)
torch.matrix_rank(input, tol=None, symmetric=False, *, out=None)
torch.matrix_exp(input)
torch.mm(input, mat2, *, out=None)
torch.mv(input, vec, *, out=None)
torch.orgqr(input, tau)
torch.ormqr(input, tau, other, left=True, transpose=False, *, out=None)
torch.pinverse(input, rcond=1e-15)
torch.qr(input, some=True, *, out=None)
torch.solve(input, A, *, out=None)
torch.svd(input, some=True, compute_uv=True, *, out=None)
torch.svd_lowrank(A, q=6, niter=2, M=None)
torch.pca_lowrank(A, q=None, center=True, niter=2)
torch.symeig(input, eigenvectors=False, upper=True, *, out=None)
torch.lobpcg(A, k=None, B=None, X=None, n=None, iK=None, niter=None, tol=None, largest=None, method=None, tracker=None, ortho_iparams=None, ortho_fparams=None, ortho_bparams=None)
torch.trapz(y, x, *, dim=-1)
torch.trapz(y, *, dx=1, dim=-1)
torch.triangular_solve(b, A, upper=True, transpose=False, unitriangular=False)
torch.vdot(input, other, *, out=None)
torch.compiled_with_cxx11_abi()
torch.result_type(tensor1, tensor2)
torch.can_cast(from, to)
torch.promote_types(type1, type2)
torch.use_deterministic_algorithms(mode)
torch.are_deterministic_algorithms_enabled()
torch._assert(condition, message)
torch.nn.Sequential(*args)
torch.nn.ModuleList(modules=None)
torch.nn.ModuleDict(modules=None)
torch.nn.ParameterList(parameters=None)
torch.nn.ParameterDict(parameters=None)
torch.nn.modules.module.register_module_forward_pre_hook(hook)
torch.nn.modules.module.register_module_forward_hook(hook)
torch.nn.modules.module.register_module_backward_hook(hook)
torch.nn.Conv1d(in_channels, out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros', device=None, dtype=None)
torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros', device=None, dtype=None)
torch.nn.Conv3d(in_channels, out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros', device=None, dtype=None)
torch.nn.ConvTranspose1d(in_channels, out_channels, kernel_size, stride=1, padding=0, output_padding=0, groups=1, bias=True, dilation=1, padding_mode='zeros', device=None, dtype=None)
torch.nn.ConvTranspose2d(in_channels, out_channels, kernel_size, stride=1, padding=0, output_padding=0, groups=1, bias=True, dilation=1, padding_mode='zeros', device=None, dtype=None)
torch.nn.ConvTranspose3d(in_channels, out_channels, kernel_size, stride=1, padding=0, output_padding=0, groups=1, bias=True, dilation=1, padding_mode='zeros', device=None, dtype=None)
torch.nn.LazyConv1d(out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros', device=None, dtype=None)
torch.nn.LazyConv2d(out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros', device=None, dtype=None)
torch.nn.LazyConv3d(out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros', device=None, dtype=None)
torch.nn.LazyConvTranspose1d(out_channels, kernel_size, stride=1, padding=0, output_padding=0, groups=1, bias=True, dilation=1, padding_mode='zeros', device=None, dtype=None)
torch.nn.LazyConvTranspose2d(out_channels, kernel_size, stride=1, padding=0, output_padding=0, groups=1, bias=True, dilation=1, padding_mode='zeros', device=None, dtype=None)
torch.nn.LazyConvTranspose3d(out_channels, kernel_size, stride=1, padding=0, output_padding=0, groups=1, bias=True, dilation=1, padding_mode='zeros', device=None, dtype=None)
torch.nn.Unfold(kernel_size, dilation=1, padding=0, stride=1)
torch.nn.Fold(output_size, kernel_size, dilation=1, padding=0, stride=1)
torch.nn.MaxPool1d(kernel_size, stride=None, padding=0, dilation=1, return_indices=False, ceil_mode=False)
torch.nn.MaxPool2d(kernel_size, stride=None, padding=0, dilation=1, return_indices=False, ceil_mode=False)
torch.nn.MaxPool3d(kernel_size, stride=None, padding=0, dilation=1, return_indices=False, ceil_mode=False)
torch.nn.MaxUnpool1d(kernel_size, stride=None, padding=0)
torch.nn.MaxUnpool2d(kernel_size, stride=None, padding=0)
torch.nn.MaxUnpool3d(kernel_size, stride=None, padding=0)
torch.nn.AvgPool1d(kernel_size, stride=None, padding=0, ceil_mode=False, count_include_pad=True)
torch.nn.AvgPool2d(kernel_size, stride=None, padding=0, ceil_mode=False, count_include_pad=True, divisor_override=None)
torch.nn.AvgPool3d(kernel_size, stride=None, padding=0, ceil_mode=False, count_include_pad=True, divisor_override=None)
torch.nn.FractionalMaxPool2d(kernel_size, output_size=None, output_ratio=None, return_indices=False, _random_samples=None)
torch.nn.LPPool1d(norm_type, kernel_size, stride=None, ceil_mode=False)
torch.nn.LPPool2d(norm_type, kernel_size, stride=None, ceil_mode=False)
torch.nn.AdaptiveMaxPool1d(output_size, return_indices=False)
torch.nn.AdaptiveMaxPool2d(output_size, return_indices=False)
torch.nn.AdaptiveMaxPool3d(output_size, return_indices=False)
torch.nn.AdaptiveAvgPool1d(output_size)
torch.nn.AdaptiveAvgPool2d(output_size)
torch.nn.AdaptiveAvgPool3d(output_size)
torch.nn.ReflectionPad1d(padding)
torch.nn.ReflectionPad2d(padding)
torch.nn.ReplicationPad1d(padding)
torch.nn.ReplicationPad2d(padding)
torch.nn.ReplicationPad3d(padding)
torch.nn.ZeroPad2d(padding)
torch.nn.ConstantPad1d(padding, value)
torch.nn.ConstantPad2d(padding, value)
torch.nn.ConstantPad3d(padding, value)
torch.nn.ELU(alpha=1.0, inplace=False)
torch.nn.Hardshrink(lambd=0.5)
torch.nn.Hardsigmoid(inplace=False)
torch.nn.Hardtanh(min_val=-1.0, max_val=1.0, inplace=False, min_value=None, max_value=None)
torch.nn.Hardswish(inplace=False)
torch.nn.LeakyReLU(negative_slope=0.01, inplace=False)
torch.nn.MultiheadAttention(embed_dim, num_heads, dropout=0.0, bias=True, add_bias_kv=False, add_zero_attn=False, kdim=None, vdim=None, batch_first=False, device=None, dtype=None)
torch.nn.PReLU(num_parameters=1, init=0.25, device=None, dtype=None)
torch.nn.ReLU(inplace=False)
torch.nn.ReLU6(inplace=False)
torch.nn.RReLU(lower=0.125, upper=0.3333333333333333, inplace=False)
torch.nn.SELU(inplace=False)
torch.nn.CELU(alpha=1.0, inplace=False)
torch.nn.SiLU(inplace=False)
torch.nn.Softplus(beta=1, threshold=20)
torch.nn.Softshrink(lambd=0.5)
torch.nn.Threshold(threshold, value, inplace=False)
torch.nn.Softmin(dim=None)
torch.nn.Softmax(dim=None)
torch.nn.LogSoftmax(dim=None)
torch.nn.AdaptiveLogSoftmaxWithLoss(in_features, n_classes, cutoffs, div_value=4.0, head_bias=False, device=None, dtype=None)
torch.nn.BatchNorm1d(num_features, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True, device=None, dtype=None)
torch.nn.BatchNorm2d(num_features, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True, device=None, dtype=None)
torch.nn.BatchNorm3d(num_features, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True, device=None, dtype=None)
torch.nn.GroupNorm(num_groups, num_channels, eps=1e-05, affine=True, device=None, dtype=None)
torch.nn.SyncBatchNorm(num_features, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True, process_group=None, device=None, dtype=None)
torch.nn.InstanceNorm1d(num_features, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False, device=None, dtype=None)
torch.nn.InstanceNorm2d(num_features, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False, device=None, dtype=None)
torch.nn.InstanceNorm3d(num_features, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False, device=None, dtype=None)
torch.nn.LayerNorm(normalized_shape, eps=1e-05, elementwise_affine=True, device=None, dtype=None)
torch.nn.LocalResponseNorm(size, alpha=0.0001, beta=0.75, k=1.0)
torch.nn.RNNBase(mode, input_size, hidden_size, num_layers=1, bias=True, batch_first=False, dropout=0.0, bidirectional=False, proj_size=0, device=None, dtype=None)
torch.nn.RNN(*args, **kwargs)
torch.nn.LSTM(*args, **kwargs)
torch.nn.GRU(*args, **kwargs)
torch.nn.RNNCell(input_size, hidden_size, bias=True, nonlinearity='tanh', device=None, dtype=None)
torch.nn.LSTMCell(input_size, hidden_size, bias=True, device=None, dtype=None)
torch.nn.GRUCell(input_size, hidden_size, bias=True, device=None, dtype=None)
torch.nn.Transformer(d_model=512, nhead=8, num_encoder_layers=6, num_decoder_layers=6, dim_feedforward=2048, dropout=0.1, activation='relu', custom_encoder=None, custom_decoder=None, layer_norm_eps=1e-05, batch_first=False, device=None, dtype=None)
torch.nn.TransformerEncoder(encoder_layer, num_layers, norm=None)
torch.nn.TransformerDecoder(decoder_layer, num_layers, norm=None)
torch.nn.TransformerEncoderLayer(d_model, nhead, dim_feedforward=2048, dropout=0.1, activation='relu', layer_norm_eps=1e-05, batch_first=False, device=None, dtype=None)
torch.nn.TransformerDecoderLayer(d_model, nhead, dim_feedforward=2048, dropout=0.1, activation='relu', layer_norm_eps=1e-05, batch_first=False, device=None, dtype=None)
torch.nn.Identity(*args, **kwargs)
torch.nn.Linear(in_features, out_features, bias=True, device=None, dtype=None)
torch.nn.Bilinear(in1_features, in2_features, out_features, bias=True, device=None, dtype=None)
torch.nn.LazyLinear(out_features, bias=True, device=None, dtype=None)
torch.nn.Dropout(p=0.5, inplace=False)
torch.nn.Dropout2d(p=0.5, inplace=False)
torch.nn.Dropout3d(p=0.5, inplace=False)
torch.nn.AlphaDropout(p=0.5, inplace=False)
torch.nn.Embedding(num_embeddings, embedding_dim, padding_idx=None, max_norm=None, norm_type=2.0, scale_grad_by_freq=False, sparse=False, _weight=None, device=None, dtype=None)
torch.nn.EmbeddingBag(num_embeddings, embedding_dim, max_norm=None, norm_type=2.0, scale_grad_by_freq=False, mode='mean', sparse=False, _weight=None, include_last_offset=False, padding_idx=None, device=None, dtype=None)
torch.nn.CosineSimilarity(dim=1, eps=1e-08)
torch.nn.PairwiseDistance(p=2.0, eps=1e-06, keepdim=False)
torch.nn.L1Loss(size_average=None, reduce=None, reduction='mean')
torch.nn.MSELoss(size_average=None, reduce=None, reduction='mean')
torch.nn.CrossEntropyLoss(weight=None, size_average=None, ignore_index=-100, reduce=None, reduction='mean')
torch.nn.NLLLoss(weight=None, size_average=None, ignore_index=-100, reduce=None, reduction='mean')
torch.nn.CTCLoss(blank=0, reduction='mean', zero_infinity=False)
torch.nn.PoissonNLLLoss(log_input=True, full=False, size_average=None, eps=1e-08, reduce=None, reduction='mean')
torch.nn.GaussianNLLLoss(*, full=False, eps=1e-06, reduction='mean')
torch.nn.KLDivLoss(size_average=None, reduce=None, reduction='mean', log_target=False)
torch.nn.BCELoss(weight=None, size_average=None, reduce=None, reduction='mean')
torch.nn.BCEWithLogitsLoss(weight=None, size_average=None, reduce=None, reduction='mean', pos_weight=None)
torch.nn.MarginRankingLoss(margin=0.0, size_average=None, reduce=None, reduction='mean')
torch.nn.HingeEmbeddingLoss(margin=1.0, size_average=None, reduce=None, reduction='mean')
torch.nn.MultiLabelMarginLoss(size_average=None, reduce=None, reduction='mean')
torch.nn.SmoothL1Loss(size_average=None, reduce=None, reduction='mean', beta=1.0)
torch.nn.SoftMarginLoss(size_average=None, reduce=None, reduction='mean')
torch.nn.MultiLabelSoftMarginLoss(weight=None, size_average=None, reduce=None, reduction='mean')
torch.nn.CosineEmbeddingLoss(margin=0.0, size_average=None, reduce=None, reduction='mean')
torch.nn.MultiMarginLoss(p=1, margin=1.0, weight=None, size_average=None, reduce=None, reduction='mean')
torch.nn.TripletMarginLoss(margin=1.0, p=2.0, eps=1e-06, swap=False, size_average=None, reduce=None, reduction='mean')
torch.nn.TripletMarginWithDistanceLoss(*, distance_function=None, margin=1.0, swap=False, reduction='mean')
torch.nn.PixelShuffle(upscale_factor)
torch.nn.PixelUnshuffle(downscale_factor)
torch.nn.Upsample(size=None, scale_factor=None, mode='nearest', align_corners=None)
torch.nn.UpsamplingNearest2d(size=None, scale_factor=None)
torch.nn.UpsamplingBilinear2d(size=None, scale_factor=None)
torch.nn.ChannelShuffle(groups)
torch.nn.DataParallel(module, device_ids=None, output_device=None, dim=0)
torch.nn.parallel.DistributedDataParallel(module, device_ids=None, output_device=None, dim=0, broadcast_buffers=True, process_group=None, bucket_cap_mb=25, find_unused_parameters=False, check_reduction=False, gradient_as_bucket_view=False)
torch.nn.utils.clip_grad_norm_(parameters, max_norm, norm_type=2.0, error_if_nonfinite=False)
torch.nn.utils.clip_grad_value_(parameters, clip_value)
torch.nn.utils.parameters_to_vector(parameters)
torch.nn.utils.vector_to_parameters(vec, parameters)
torch.nn.utils.prune.PruningContainer(*args)
torch.nn.utils.prune.RandomUnstructured(amount)
torch.nn.utils.prune.L1Unstructured(amount)
torch.nn.utils.prune.RandomStructured(amount, dim=-1)
torch.nn.utils.prune.LnStructured(amount, n, dim=-1)
torch.nn.utils.prune.CustomFromMask(mask)
torch.nn.utils.prune.random_unstructured(module, name, amount)
torch.nn.utils.prune.l1_unstructured(module, name, amount, importance_scores=None)
torch.nn.utils.prune.random_structured(module, name, amount, dim)
torch.nn.utils.prune.ln_structured(module, name, amount, n, dim, importance_scores=None)
torch.nn.utils.prune.global_unstructured(parameters, pruning_method, importance_scores=None, **kwargs)
torch.nn.utils.prune.custom_from_mask(module, name, mask)
torch.nn.utils.prune.remove(module, name)
torch.nn.utils.prune.is_pruned(module)
torch.nn.utils.weight_norm(module, name='weight', dim=0)
torch.nn.utils.remove_weight_norm(module, name='weight')
torch.nn.utils.spectral_norm(module, name='weight', n_power_iterations=1, eps=1e-12, dim=None)
torch.nn.utils.remove_spectral_norm(module, name='weight')
torch.nn.utils.rnn.pack_padded_sequence(input, lengths, batch_first=False, enforce_sorted=True)
torch.nn.utils.rnn.pad_packed_sequence(sequence, batch_first=False, padding_value=0.0, total_length=None)
torch.nn.utils.rnn.pad_sequence(sequences, batch_first=False, padding_value=0.0)
torch.nn.utils.rnn.pack_sequence(sequences, enforce_sorted=True)
torch.nn.Flatten(start_dim=1, end_dim=-1)
torch.nn.Unflatten(dim, unflattened_size)
torch.nn.modules.lazy.LazyModuleMixin(*args, **kwargs)
